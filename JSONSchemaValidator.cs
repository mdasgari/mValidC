using System.Collections;
using System.Reflection;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Linq;
using System.Text.RegularExpressions;
namespace Moshk{
	public static class  M  {
		/*
		if (!String.prototype.format) {
			String.prototype.format = function() {
			FIXME_VAR_TYPE args= arguments;
			return this.replace(/{(d+)}/g, function(match, number) { 
				return typeof args[number] != 'undefined'
				? args[number]
				: match
				;
			});
			};
		}
		if (!String.prototype.strReverse) {
			String.prototype.strReverse = function() {
				FIXME_VAR_TYPE newstring= "";
				for (FIXME_VAR_TYPE s=0; s < this.Length; s++) {
					newstring = this.charAt(s) + newstring;
				}
				return newstring;
			}
			};
			*/
		public static string Slice(this string source, int start, int end =0){
				if (end < 0) // Keep this for negative end support
					end = source.Length + end;
				if(end==0)
					end=source.Length;
				int len = end - start;               // Calculate length
				return source.Substring(start, len); // Return Substring of length
		}
		public static long Ceil(double p){
			long r =(long) p ;
			if (r==p)return r;
			if (r<p && r>0)r++;
			if (r>p && r<0)r--;
			return r;
		}
		private static string  typeOf(dynamic p){
			if(p is null)return "undefined";
			if(p is Object)return "object";
			if(p is bool)return "boolean";
			if(p is string)return "string";
			if(p is int)return "number";
			if(p is long)return "number";
			if(p is float)return "number";
			if(p is double)return "number";
			return (p is null) ? "undefined" : p.Type;
		}
		public static string Reverse( string s )
		{
			char[] charArray = s.ToCharArray();
			Array.Reverse(charArray);
			return new string(charArray);
		}
		static dynamic pattern = JObject.Parse(@"{
			""OneSpace"":{""Type"":""p"",""Pat"":""[ ]""},
			""Space"":{""Type"":""P"",""Pat"":""[ ]*""},
			""SpaceFa"":{""Type"":""P"",""Pat"":""[ \u200C]*""},
			""alphaOnlyFa"":{""Type"":""P"",""Pat"":""[\u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC]*""},
			""alphaOnly"":{""Type"":""P"",""Pat"":""[A-Za-z]*""},
			""DashOnly"":{""Type"":""P"",""Pat"":""[\\-\\_ ]*""},
			""Num"":{""Type"":""P"",""Pat"":""[+-]?(\\d+(\\.\\d*)?|\\d*(\\.\\d+))""},
			""NumFa"":{""Type"":""P"",""Pat"":""([+-]?([0-9]+(\\.[0-9]*)?|[0-9]*(\\.[0-9]+))|([\u06F0-\u06F9]+(\\.[\u06F0-\u06F9]*)?|[\u06F0-\u06F9]*(\\.[\u06F0-\u06F9]+)))""},
			""NumBin"":{""Type"":""P"",""Pat"":""[01]*""},
			""NumOct"":{""Type"":""P"",""Pat"":""[0-7]*""},
			""NumHex"":{""Type"":""P"",""Pat"":""[0-9A-Fa-f]*""},
			""SpecialCharWritable"":{""Type"":""P"",""Pat"":""[~!@#\\$%\\^&*\\(\\)_\\+\\-=\\[\\]\\{\\}\\/;:\\.,?|\u066A\u00D7\u060C\u066B]*""},
			""SpecialCharNaming"":{""Type"":""P"",""Pat"":""[~!@#\\$%\\^&\\(\\)_\\+\\-=\\[\\]\\{\\};\\.,\u066A\u00D7\u060C\u066B]*""},
			""Currency"":{""Type"":""P"",""Pat"":""[+-]?([0-9]{1,15}(\\.[0-9]{0,3})?|[0-9]{0,15}(\\.[0-9]{1,3}))""},
			""NumReal"":{""Type"":""P"",""Pat"":""[+-]?(\\d+(\\.\\d*)?|\\d*(\\.\\d+))""},
			""NumRealExt"":{""Type"":""P"",""Pat"":""([-+]?(([0-9]+(\\.[0-9]*)?)|([0-9]*(\\.[0-9]+)))([eE][-+]?[0-9]+)?)""},
			""NumRealFa"":{""Type"":""P"",""Pat"":""([+-]?([0-9]+(\\.[0-9]*)?|[0-9]*(\\.[0-9]+))|([\u06F0-\u06F9]+(\\.[\u06F0-\u06F9]*)?|[\u06F0-\u06F9]*(\\.[\u06F0-\u06F9]+)))""},
			""NumRealExtFa"":{""Type"":""P"",""Pat"":""([-+]?(((([0-9]+(\\.[0-9]*)?)|([0-9]*(\\.[0-9]+)))([eE][-+]?[0-9]{1,3})?)|((([\u06F0-\u06F9]+(\\.[\u06F0-\u06F9]*)?)|([\u06F0-\u06F9]*(\\.[\u06F0-\u06F9]+)))([eE][-+]?[\u06F0-\u06F9]{1,3})?)))""},
			""NumInt"":{""Type"":""P"",""Pat"":""[+-]?[0-9]+""},
			""NumIntFa"":{""Type"":""P"",""Pat"":""[+-]?(([0-9]+)|([\u06F0-\u06F9]+))""},
			""irCarPlateFreeZone"":{""Type"":""P"",""Pat"":""[1-9]{5}""},
			""irCarPlateFreeZoneFa"":{""Type"":""P"",""Pat"":""([\u06F1-\u06F9]{5}|[1-9]{5})""},
			""irCarPlateDiplomat"":{""Type"":""P"",""Pat"":""[1-9]{2}(S|s|D|d)[1-9]{3}[1-9][0-9]""},
			""irCarPlate"":{""Type"":""P"",""Pat"":""[1-9]{2}[H|F|P|J|E|O|N|C|S|A|W|X|U|T|R|:|G|L|K|,|I|D|V|B|Z|M|h|f|p|j|e|o|n|c|s|a|w|x|u|t|r|:|\""|g|l|k|,|i|d|v|b|z|m][1-9]{3}[1-9][0-9]""},
			""irCarPlateFa"":{""Type"":""P"",""Pat"":""(([1-9]{2}(\u0649|\u06CC|\u0628|\u062C|\u062F|\u0698|\u0633|\u0635|\u0637|\u0642|\u0644|\u0645|\u0646|\u0648|\u0647|\u064A|\u0643|\u06A9|\u06AF|\u062A|\u067E|\u062B|\u0632|\u0634|\u0641|\u0627\u0644\u0641|S|s|D|d)[1-9]{3}[1-9][0-9])|([\u06F1-\u06F9]{2}(\u0649|\u06CC|\u0628|\u062C|\u062F|\u0698|\u0633|\u0635|\u0637|\u0642|\u0644|\u0645|\u0646|\u0648|\u0647|\u064A|\u0643|\u06A9|\u06AF|\u062A|\u067E|\u062B|\u0632|\u0634|\u0641|\u0627\u0644\u0641|S|s|D|d)[\u06F1-\u06F9]{3}[\u06F1-\u06F9][\u06F0-\u06F9]))""},
			""irCarPlateTashrifat"":{""Type"":""P"",""Pat"":""([\u06F1-\u06F9]{4}|[1-9]{4})""},
			""irCarPlateTarikhi"":{""Type"":""P"",""Pat"":""([\u06F1-\u06F9]{5}|[1-9]{5})""},
			""irCarPlateMotor"":{""Type"":""P"",""Pat"":""([\u06F1-\u06F9]{8}|[1-9]{8})""},
			""irMobile"":{""Type"":""P"",""Pat"":""(((00989|\\+989|989|09|9)[0-9]{9})|((\u06F0\u06F0\u06F9\u06F8\u06F9|\\+\u06F9\u06F8\u06F9|\u06F9\u06F8\u06F9|\u06F0\u06F9|\u06F9)[\u06F0-\u06F9]{9}))""},
			""irPostalCode"":{""Type"":""P"",""Pat"":""(([13456789]{5}[0123456789]{5})|([\u06F1\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9]{5}[\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9]{5}))""},
			""irPhoneNo"":{""Type"":""P"",""Pat"":""((((\\+98|98|0098|0){0,1}[1-8][1-9]){0,1}[2-8]([0-9]{3,4}|[0-9]{7}))|(((\\+\u06F9\u06F8|\u06F9\u06F8|\u06F0\u06F0\u06F9\u06F8|\u06F0){0,1}[\u06F1-\u06F8][\u06F1-\u06F9]){0,1}[\u06F2-\u06F8]([\u06F0-\u06F9]{3,4}|[\u06F0-\u06F9]{7})))""},
			""IpV4"":{""Type"":""P"",""Pat"":""((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}""},
			""IpV6"":{""Type"":""P"",""Pat"":""(([0-9A-Fa-f]{1,4}:){7,7}[0-9A-Fa-f]{1,4}|([0-9A-Fa-f]{1,4}:){1,7}:|([0-9A-Fa-f]{1,4}:){1,6}:[0-9A-Fa-f]{1,4}|([0-9A-Fa-f]{1,4}:){1,5}(:[0-9A-Fa-f]{1,4}){1,2}|([0-9A-Fa-f]{1,4}:){1,4}(:[0-9A-Fa-f]{1,4}){1,3}|([0-9A-Fa-f]{1,4}:){1,3}(:[0-9A-Fa-f]{1,4}){1,4}|([0-9A-Fa-f]{1,4}:){1,2}(:[0-9A-Fa-f]{1,4}){1,5}|[0-9A-Fa-f]{1,4}:((:[0-9A-Fa-f]{1,4}){1,6})|:((:[0-9A-Fa-f]{1,4}){1,7}|:)|fe80:(:[0-9A-Fa-f]{0,4}){0,4}%[0-9A-Za-z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}|([0-9A-Fa-f]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4})""},
			""MAC"":{""Type"":""P"",""Pat"":""(?:[0-9A-Fa-f]{2}[:-]){5}(?:[0-9A-Fa-f]{2})""},
			""email"":{""Type"":""P"",""Pat"":""([\\w\\.]+@([\\w-]+\\.)+[\\w-]{2,4})""},
			""DateLunar"":{""Type"":""P"",""Pat"":""((1[34][0-9]{2}[ \\.\\-\\/](0[1-9]|1[012])[ \\.\\-\\/](0[1-9]|[12][0-9]|30))|(\u06F1[\u06F3\u06F4][\u06F0-\u06F9]{2}[ \\.\\-\\/](\u06F0[\u06F1-\u06F9]|\u06F1[\u06F0\u06F1\u06F2])[ \\.\\-\\/](\u06F0[\u06F1-\u06F9]|[\u06F1\u06F2][\u06F0-\u06F9]|\u06F3\u06F0)))""},
			""DateSolar"":{""Type"":""P"",""Pat"":""((1[34][0-9]{2}[ \\.\\-\\/](0[1-6][ \\.\\-\\/](0[1-9]|[12][0-9]|30|31)|(((0[789])|(1[012]))[ \\.\\-\\/](0[1-9]|[12][0-9]|30))))|(\u06F1[\u06F3\u06F4][\u06F0-\u06F9]{2}[ \\.\\-\\/](\u06F0[\u06F1-\u06F6][ \\.\\-\\/](\u06F0[\u06F1-\u06F9]|[\u06F1\u06F2][\u06F0-\u06F9]|\u06F3\u06F0|\u06F3\u06F1)|(((\u06F0[\u06F7\u06F8\u06F9])|(\u06F1[\u06F0\u06F1\u06F2]))[ \\.\\-\\/](\u06F0[\u06F1-\u06F9]|[\u06F1\u06F2][\u06F0-\u06F9]|\u06F3\u06F0)))))""},
			""Date"":{""Type"":""P"",""Pat"":""((19|20)[0-9]{2})[ \\.\\-\\/](((01|03|05|07|08|10|12)[ \\.\\-\\/](0[1-9]|[12][0-9]|30|31))|((04|06|09|11)[ \\.\\-\\/](0[1-9]|[12][0-9]|30))|(02[ \\.\\-\\/](0[1-9]|[12][0-9])))""},
			""Date8Lunar"":{""Type"":""P"",""Pat"":""((1[34][0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|30))|(\u06F1[\u06F3\u06F4][\u06F0-\u06F9]{2}(\u06F0[\u06F1-\u06F9]|\u06F1[\u06F0\u06F1\u06F2])(\u06F0[\u06F1-\u06F9]|[\u06F1\u06F2][\u06F0-\u06F9]|\u06F3\u06F0)))""},
			""Date6Lunar"":{""Type"":""P"",""Pat"":""(([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|30))|([\u06F0-\u06F9]{2}(\u06F0[\u06F1-\u06F9]|\u06F1[\u06F0\u06F1\u06F2])(\u06F0[\u06F1-\u06F9]|[\u06F1\u06F2][\u06F0-\u06F9]|\u06F3\u06F0)))""},
			""DateYLunar"":{""Type"":""P"",""Pat"":""((1[34][0-9]{2})|(\u06F1[\u06F3\u06F4][\u06F0-\u06F9]{2}))""},
			""Date8Solar"":{""Type"":""P"",""Pat"":""((1[34][0-9]{2}(0[1-6](0[1-9]|[12][0-9]|30|31)|(((0[789])|(1[012]))(0[1-9]|[12][0-9]|30))))|(\u06F1[\u06F3\u06F4][\u06F0-\u06F9]{2}(\u06F0[\u06F1-\u06F6](\u06F0[\u06F1-\u06F9]|[\u06F1\u06F2][\u06F0-\u06F9]|\u06F3\u06F0|\u06F3\u06F1)|(((\u06F0[\u06F7\u06F8\u06F9])|(\u06F1[\u06F0\u06F1\u06F2]))(\u06F0[\u06F1-\u06F9]|[\u06F1\u06F2][\u06F0-\u06F9]|\u06F3\u06F0)))))""},
			""Date6Solar"":{""Type"":""P"",""Pat"":""(([0-9]{2}(0[1-6](0[1-9]|[12][0-9]|30|31)|(((0[789])|(1[012]))(0[1-9]|[12][0-9]|30))))|([\u06F0-\u06F9]{2}(\u06F0[\u06F1-\u06F6](\u06F0[\u06F1-\u06F9]|[\u06F1\u06F2][\u06F0-\u06F9]|\u06F3\u06F0|\u06F3\u06F1)|(((\u06F0[\u06F7\u06F8\u06F9])|(\u06F1[\u06F0\u06F1\u06F2]))(\u06F0[\u06F1-\u06F9]|[\u06F1\u06F2][\u06F0-\u06F9]|\u06F3\u06F0)))))""},
			""DateYSolar"":{""Type"":""P"",""Pat"":""((1[34][0-9]{2})|([\u06F1][\u06F3\u06F4][\u06F0-\u06F9]{2}))""},
			""Date8"":{""Type"":""P"",""Pat"":""((19|20)[0-9]{2})(((01|03|05|07|08|10|12)(0[1-9]|[12][0-9]|30|31))|((04|06|09|11)(0[1-9]|[12][0-9]|30))|(02(0[1-9]|[12][0-9])))""},
			""Date6"":{""Type"":""P"",""Pat"":""([0-9]{2})(((01|03|05|07|08|10|12)(0[1-9]|[12][0-9]|30|31))|((04|06|09|11)(0[1-9]|[12][0-9]|30))|(02(0[1-9]|[12][0-9])))""},
			""DateY"":{""Type"":""P"",""Pat"":""((19|20)[0-9]{2})""},
			""DateM"":{""Type"":""P"",""Pat"":""(0[1-9]|1[012])""},
			""DateD"":{""Type"":""P"",""Pat"":""(0[1-9]|[12][0-9]|30|31)""},
			""Time"":{""Type"":""P"",""Pat"":""(([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]))""},
			""TimeHM"":{""Type"":""P"",""Pat"":""(([01][0-9]|2[0-3]):([0-5][0-9]))""},
			""TimeH"":{""Type"":""P"",""Pat"":""(([01][0-9]|2[0-3]))""},
			""TimeM"":{""Type"":""P"",""Pat"":""([0-5][0-9])""},
			""TimeS"":{""Type"":""P"",""Pat"":""([0-5][0-9])""},
			""TimeFa"":{""Type"":""P"",""Pat"":""((([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]))|(([\u06F0\u06F1][\u06F0-\u06F9]|\u06F2[\u06F0-\u06F3]):([\u06F0-\u06F5][\u06F0-\u06F9]):([\u06F0-\u06F5][\u06F0-\u06F9])))""},
			""TimeHMFa"":{""Type"":""P"",""Pat"":""((([01][0-9]|2[0-3]):([0-5][0-9]))|(([\u06F0\u06F1][\u06F0-\u06F9]|\u06F2[\u06F0-\u06F3]):([\u06F0-\u06F5][\u06F0-\u06F9])))""},
			""TimeHFa"":{""Type"":""P"",""Pat"":""((([01][0-9]|2[0-3]))|(([\u06F0\u06F1][\u06F0-\u06F9]|\u06F2[\u06F0-\u06F3])))""},
			""TimeMFa"":{""Type"":""P"",""Pat"":""([0-5][0-9]|[\u06F0-\u06F5][\u06F0-\u06F9])""},
			""TimeSFa"":{""Type"":""P"",""Pat"":""([0-5][0-9]|[\u06F0-\u06F5][\u06F0-\u06F9])""},
			""uriTemplate"":{""Type"":""P"",""Pat"":""(([\\u21\\u23-\\u24\\u26-\\u3B\\u3D\\u3F-\\u5B\\u5D\\u5F\\u61-\\u7A\\u7E\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD\\uE000-\\uF8FF\\uF0000-\\uFFFFD\\u100000\\u10FFFD]|(%[0-9a-fA-F]{2}))|(\\{(\\+#\\.\\/;\\?&=,!@\\|)?(([a-zA-Z0-9\\_]|(%[0-9a-fA-F]{2}))+(\\.([a-zA-Z0-9\\_]|(%[0-9a-fA-F]{2}))*)*((:[1-9][0-9]{0,3})|\\*)?(,([a-zA-Z0-9\\_]|(%[0-9a-fA-F]{2}))+(\\.([a-zA-Z0-9\\_]|(%[0-9a-fA-F]{2}))*)*((:[1-9][0-9]{0,3})|\\*)?)*)\\}))*""},
			""Hostname"":{""Type"":""P"",""Pat"":""((([A-Za-z\\d]([A-Za-z\\d-]*[A-Za-z\\d])*)\\.)*[A-Za-z]{2,}|((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4})""},
			""URL"":{""Type"":""P"",""Pat"":""(https?:\\/\\/)?((([A-Za-z\\d]([A-Za-z\\d-]*[A-Za-z\\d])*)\\.)*[A-Za-z]{2,}|((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4})?(\\:\\d+)?(\\/([A-Z-a-z\\d%_\\.~+]|(\\%[0-9A-Fa-f]{2}))+)*(\\/)?(\\?([;&A-Za-z\\d%_\\.~+=\\-]|(\\%[0-9A-Fa-f]{2}))*)?(\\#([A-Za-z\\d_]|(\\%[0-9A-Fa-f]{2}))*)?""},
			""dataURL"":{""Type"":""P"",""Pat"":""(data:)([\\w\\/\\+\\-]*)(;charset=[\\w\\-]+|;base64){0,1},(.*)""},
			""json"":{""Type"":""F"",""Pat"":""isJSON""},
			""URI"":{""Type"":""P"",""Pat"":""(([a-zA-Z]([0-9A-Za-z\\+\\-\\.])*):(\\/\\/((([0-9A-Za-z\\$\\-_\\.\\+!\\*\\'\\(\\),;\\?&=]|(%[0-9A-Fa-f]{2}))+(:([0-9A-Za-z\\$\\-_\\.\\+!\\*\\'\\(\\),;\\?&=]|(%[0-9A-Fa-f]{2}))+)?@)?((((([0-9A-Za-z]|[0-9A-Za-z][0-9A-Za-z\\-]*[0-9A-Za-z])\\.)*([a-zA-Z]|[a-zA-Z][0-9A-Za-z\\-]*[0-9A-Za-z]))|((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.\\?\\b){4})(:[1-9][0-9]*)?))(((\\/(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))*))*)|((\\/((([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))+)(\\/(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))*))*)?))|(((([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))+)(\\/(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))*))*))|(((([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\)@&=\\+\\$,]|(%[0-9a-fA-F]{2}))+)(\\/(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))*))*)))?)(\\?(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\);\\/\\?:@&=\\+\\$,]|([0-9A-Fa-f]{2}))+))?(#(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\);\\/\\?:@&=\\+\\$,]|([0-9A-Fa-f]{2}))+))?)""},
			""URIReference"":{""Type"":""P"",""Pat"":""((([a-zA-Z]([0-9A-Za-z\\+\\-\\.])*):(\\/\\/((([0-9A-Za-z\\$\\-_\\.\\+!\\*\\'\\(\\),;\\?&=]|(%[0-9A-Fa-f]{2}))+(:([0-9A-Za-z\\$\\-_\\.\\+!\\*\\'\\(\\),;\\?&=]|(%[0-9A-Fa-f]{2}))+)?@)?((((([0-9A-Za-z]|[0-9A-Za-z][0-9A-Za-z\\-]*[0-9A-Za-z])\\.)*([a-zA-Z]|[a-zA-Z][0-9A-Za-z\\-]*[0-9A-Za-z]))|((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.\\?\\b){4})(:[1-9][0-9]*)?))(((\\/(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))*))*)|((\\/((([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))+)(\\/(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))*))*)?))|(((([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))+)(\\/(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))*))*))|(((([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\)@&=\\+\\$,]|(%[0-9a-fA-F]{2}))+)(\\/(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))*))*)))?)(\\?(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\);\\/\\?:@&=\\+\\$,]|([0-9A-Fa-f]{2}))+))?(#(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\);\\/\\?:@&=\\+\\$,]|([0-9A-Fa-f]{2}))+))?)|(((\\/\\/((([0-9A-Za-z\\$\\-_\\.\\+!\\*\\'\\(\\),;\\?&=]|(%[0-9A-Fa-f]{2}))+(:([0-9A-Za-z\\$\\-_\\.\\+!\\*\\'\\(\\),;\\?&=]|(%[0-9A-Fa-f]{2}))+)?@)?((((([0-9A-Za-z]|[0-9A-Za-z][0-9A-Za-z\\-]*[0-9A-Za-z])\\.)*([a-zA-Z]|[a-zA-Z][0-9A-Za-z\\-]*[0-9A-Za-z]))|((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.\\?\\b){4})(:[1-9][0-9]*)?))(((\\/(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))*))*)|((\\/((([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))+)(\\/(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))*))*)?))|(((([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\)@&=\\+\\$,]|(%[0-9a-fA-F]{2}))+)(\\/(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))*))*)))?))(\\?(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\);\\/\\?:@&=\\+\\$,]|([0-9A-Fa-f]{2}))+))?(#(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\);\\/\\?:@&=\\+\\$,]|([0-9A-Fa-f]{2}))+))?))""},
			""GUID"":{""Type"":""P"",""Pat"":""((\\{([0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12})\\})|([0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}))""},
			""irireference"":{""Type"":""P"",""Pat"":""((([a-zA-Z]([0-9A-Za-z\\+\\-\\.])*):(\\/\\/((([0-9A-Za-z\\$\\-_\\.\\+!\\*\\'\\(\\),;\\?&=]|(%[0-9A-Fa-f]{2}))+(:([0-9A-Za-z\\$\\-_\\.\\+!\\*\\'\\(\\),;\\?&=]|(%[0-9A-Fa-f]{2}))+)?@)?((((([0-9A-Za-z]|[0-9A-Za-z][0-9A-Za-z\\-]*[0-9A-Za-z])\\.)*([a-zA-Z]|[a-zA-Z][0-9A-Za-z\\-]*[0-9A-Za-z]))|((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.\\?\\b){4})(:[1-9][0-9]*)?))(((\\/(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))*))*)|((\\/((([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))+)(\\/(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))*))*)?))|(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\);\\/\\?:@&=\\+\\$,]|([0-9A-Fa-f]{2}))(\\/([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\);\\/\\?:@&=\\+\\$,]|([0-9A-Fa-f]{2})))*)|(((([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\)@&=\\+\\$,]|(%[0-9a-fA-F]{2}))+)(\\/(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,]|(%[0-9a-fA-F]{2}))*))*)))?)(\\?([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\);\\/\\?:@&=\\+\\$,]|([0-9A-Fa-f]{2})))?(#(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,\\/\\?]|(%[0-9a-fA-F]{2}))*))?)|((\\/\\/(((([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\);:&=\\+\\$,]|(%[0-9a-fA-F]{2}))*)@)?((((([0-9A-Za-z]|[0-9A-Za-z][0-9A-Za-z\\-]*[0-9A-Za-z])\\.)*([a-zA-Z]|[a-zA-Z][0-9A-Za-z\\-]*[0-9A-Za-z]))|((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.\\?\\b){4}))(:([1-9][0-9]*))?)(((\\/([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\);\\/\\?:@&=\\+\\$,]|([0-9A-Fa-f]{2}))*)*)|(\\/(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\);\\/\\?:@&=\\+\\$,]|([0-9A-Fa-f]{2}))+(\\/([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\);\\/\\?:@&=\\+\\$,]|([0-9A-Fa-f]{2})))*)?)|(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\);\\/\\?@&=\\+\\$,]|([0-9A-Fa-f]{2}))(\\/(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\);\\/\\?:@&=\\+\\$,]|([0-9A-Fa-f]{2})))*)))?)(\\?([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\);\\/\\?:@&=\\+\\$,]|([0-9A-Fa-f]{2})))?(#(([0-9A-Za-z\\-_\\.!~\\*\\'\\(\\):@&=\\+\\$,\\/\\?]|(%[0-9a-fA-F]{2}))*))?))""},
			""UUID"":{""Type"":""P"",""Pat"":""([0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12})""},
			""FileName"":{""Type"":""P"",""Pat"":""[A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B\\.]{0,63}[A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B]""},
			""AllPath"":{""Type"":""P"",""Pat"":""([A-Za-z]:[\\\\\\/]|(\\\\\\\\|\\/\\/)(((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}|[A-Za-z0-9\\-]{1,64})[\\\\\\/]|\\\\|\\/|\\.\\\\|\\.\\/|(\\.\\.\\\\)*|(\\.\\.\\/)*)?([A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B\\.]{0,63}[A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B][\\\\\\/])*([A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B\\.]{0,63}[A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B])?""},
			""DrivePath"":{""Type"":""P"",""Pat"":""([A-Za-z]:[\\\\\\/]|\\\\|\\/|\\.\\\\|\\.\\/|(\\.\\.\\\\)*|(\\.\\.\\/)*)?([A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B\\.]{0,63}[A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B][\\\\\\/])*([A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B\\.]{0,63}[A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B])?""},
			""NetworkPath"":{""Type"":""P"",""Pat"":""(((\\\\\\\\|\\/\\/)(((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}|[A-Za-z0-9\\-]{1,64}))[\\\\\\/]|\\\\|\\/|\\.\\\\|\\.\\/|(\\.\\.\\\\)*|(\\.\\.\\/)*)?([A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B\\.]{0,63}[A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B][\\\\\\/])*([A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B\\.]{0,63}[A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B])?""},
			""AllPathFileName"":{""Type"":""P"",""Pat"":""([A-Za-z]:[\\\\\\/]|(\\\\\\\\|\\/\\/)(((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}|[A-Za-z0-9\\-]{1,64})[\\\\\\/]|\\\\|\\/|\\.\\\\|\\.\\/|(\\.\\.\\\\)*|(\\.\\.\\/)*)?([A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B\\.]{0,63}[A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B][\\\\\\/])*([A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B\\.]{0,63}[A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B])""},
			""DrivePathFileName"":{""Type"":""P"",""Pat"":""([A-Za-z]:[\\\\\\/]|\\\\|\\/|\\.\\\\|\\.\\/|(\\.\\.\\\\)*|(\\.\\.\\/)*)?([A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B\\.]{0,63}[A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B][\\\\\\/])*([A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B\\.]{0,63}[A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B])""},
			""NetworkPathFileName"":{""Type"":""P"",""Pat"":""(((\\\\\\\\|\\/\\/)(((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}|[A-Za-z0-9\\-]{1,64}))[\\\\\\/]|\\\\|\\/|\\.\\\\|\\.\\/|(\\.\\.\\\\)*|(\\.\\.\\/)*)?([A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B\\.]{0,63}[A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B][\\\\\\/])*([A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B\\.]{0,63}[A-Za-z0-9 \u0622\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0643\u06AF\u0641\u0642\u0639\u063A\u0644\u0645\u0646\u0648\u0647\u064AØ¡\u06A9\u067E\u0649\u06CC\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9~!@#\\$%\\^&\\(\\)\\_\\+\\-=\\[\\]\\{\\};\\,\u066A\u00D7\u060C\u066B])""},
			""alpha"":{""Type"":""Any"",""Pat"":""Space|alphaOnly""},
			""alphaDash"":{""Type"":""Any"",""Pat"":""Space|alphaOnly|Num|DashOnly""},
			""alphaNum"":{""Type"":""Any"",""Pat"":""Space|alphaOnly|Num""},
			""alphaFa"":{""Type"":""Any"",""Pat"":""SpaceFa|alphaOnlyFa""},
			""alphaNumFa"":{""Type"":""Any"",""Pat"":""SpaceFa|alphaOnlyFa|Num|NumFa""},
			""alphaDashFa"":{""Type"":""Any"",""Pat"":""SpaceFa|alphaOnlyFa|Num|NumFa|DashOnly""},
			""alphaSpecialCharWritable"":{""Type"":""Any"",""Pat"":""SpecialCharWritable|Space|alphaOnly|Num|DashOnly""},
			""alphaFaSpecialCharWritable"":{""Type"":""Any"",""Pat"":""SpecialCharWritable|SpaceFa|alphaOnlyfA|Num|NumFa|DashOnly""},
			""alphaAll"":{""Type"":""Any"",""Pat"":""SpecialCharWritable|SpaceFa|alphaOnlyFa|Num|NumFa|DashOnly|AlphaOnly""},
			""irCarPlateAll"":{""Type"":""One"",""Pat"":""irCarPlateDiplomat|irCarPlate|irCarPlateFa|irCarPlateTashrifat|irCarPlateTarikhi|irCarPlateMotor""},
			""IP"":{""Type"":""One"",""Pat"":""IPV4|IPV6""},
			""DateTime"":{""Type"":""All"",""Pat"":""Date&Space&Time""},
			""DateTimeSolar"":{""Type"":""All"",""Pat"":""DateSolar&Space&TimeFa""},
			""DateTimeLunar"":{""Type"":""All"",""Pat"":""DateLunar&Space&TimeFa""},
			""DateTimeHM"":{""Type"":""All"",""Pat"":""Date&Space&TimeHM""},
			""DateTimeHMSolar"":{""Type"":""All"",""Pat"":""DateSolar&Space&TimeHMFa""},
			""DateTimeHMLunar"":{""Type"":""All"",""Pat"":""DateLunar&Space&TimeHMFa""},
			""DateTimeH"":{""Type"":""All"",""Pat"":""Date&Space&TimeH""},
			""DateTimeHSolar"":{""Type"":""All"",""Pat"":""DateSolar&Space&TimeHFa""},
			""DateTimeHLunar"":{""Type"":""All"",""Pat"":""DateLunar&Space&TimeHFa""},
			""irIBAN"":{""Type"":""F"",""Pat"":""irIBAN""},
			""irCardNum"":{""Type"":""F"",""Pat"":""irCardNum""},
			""irNationalCode"":{""Type"":""F"",""Pat"":""irNationalCode""},
			""irNationalCodeCo"":{""Type"":""F"",""Pat"":""irNationalCodeCo""},
			""irNationalCodePerson"":{""Type"":""F"",""Pat"":""irNationalCodePerson""},
			""PasswordWeak"":{""Type"":""F"",""Pat"":""PasswordWeak""},
			""PasswordGood"":{""Type"":""F"",""Pat"":""PasswordGood""},
			""PasswordStrong"":{""Type"":""F"",""Pat"":""PasswordStrong""},
			""PassworVeryStrong"":{""Type"":""F"",""Pat"":""PassworVeryStrong""},
			}");
		static dynamic xMessagePatt= JObject.Parse(@"{
			""OneSpace"":""ÙÙ Ø¬Ø§Ù Ø®Ø§ÙÙ"",
			""Space"":""ÙÙØ· Ø­Ø±ÙÙ Ø¬Ø§Ù Ø®Ø§ÙÙ "",
			""SpaceFa"":""ÙÙØ· Ø¬Ø§Ù Ø®Ø§ÙÙ Ù ÙÙÙ Ø§Ø³Ù¾ÙØ³ "",
			""alphaOnlyFa"":""ÙÙØ· Ø­Ø±ÙÙ ÙØ§Ø±Ø³Ù"",
			""alphaOnly"":""ÙÙØ· Ø­Ø±ÙÙ Ø§ÙÚ¯ÙÙØ³Ù"",
			""DashOnly"":""ÙÙØ· Ø¯Ø´"",
			""Num"":""Ø¹Ø¯Ø¯"",
			""NumFa"":""Ø¹Ø¯Ø¯ÙØ§Ø±Ø³Ù"",
			""NumBin"":""Ø§Ø¹Ø¯Ø§Ø¯ Ø¨Ø§ÙÙØ±Ù"",
			""NumOct"":""Ø§Ø¹Ø¯Ø§Ø¯ Ø¨Ø±ÙØ¨ØªØ§Ù ÙØ´Øª"",
			""NumHex"":""Ø§Ø¹Ø¯Ø§Ø¯ Ø¨Ø±ÙØ¨ØªØ§Ù Ø´Ø§ÙØ²Ø¯Ù"",
			""SpecialCharWritable"":""ÙÙØ· Ø­Ø±ÙÙ ÙÙØ´ØªØ§Ø±Ù"",
			""SpecialCharNaming"":""ÙÙØ· Ø­Ø±ÙÙ ÙØ§ÙÚ¯Ø°Ø§Ø±Ù"",
			""Currency"":""Ø¹Ø¯Ø¯ ÙØ¨ÙØº"",
			""NumReal"":""Ø¹Ø¯Ø¯ Ø§Ø¹Ø´Ø§Ø±Ù"",
			""NumRealExt"":""Ø¹Ø¯Ø¯ Ø§Ø¹Ø´Ø§Ø±Ù Ù¾ÙØ´Ø±ÙØªÙ"",
			""NumRealFa"":""Ø¹Ø¯Ø¯Ø§Ø¹Ø´Ø§Ø±Ù ÙØ§Ø±Ø³Ù"",
			""NumRealExtFa"":""Ø¹Ø¯Ø¯Ø§Ø¹Ø´Ø§Ø±Ù ÙØ§Ø±Ø³Ù Ù¾ÙØ´Ø±ÙØªÙ"",
			""NumInt"":""Ø¹Ø¯Ø¯ØµØ­ÙØ­"",
			""NumIntFa"":""Ø¹Ø¯Ø¯ØµØ­ÙØ­ ÙØ§Ø±Ø³Ù"",
			""irCarPlateFreeZone"":""Ù¾ÙØ§Ù ÙÙØ·ÙÙ Ø¢Ø²Ø§Ø¯ Ø§ÙÚ¯ÙÙØ³Ù"",
			""irCarPlateFreeZoneFa"":""Ù¾ÙØ§Ù ÙÙØ·ÙÙ Ø¢Ø²Ø§Ø¯ ÙØ§Ø±Ø³Ù"",
			""irCarPlateDiplomat"":""Ù¾ÙØ§Ù Ø¯ÙÙ¾ÙÙØ§Øª"",
			""irCarPlate"":""Ù¾ÙØ§Ù Ø®ÙØ¯Ø±ÙÙ Ø§ÙØ±Ø§Ù Ø¨Ø§ Ø­Ø±ÙÙ Ø§ÙÚ¯ÙÙØ³Ù"",
			""irCarPlateFa"":""Ù¾ÙØ§Ù ÙØ§Ø±Ø³Ù"",
			""irCarPlateTashrifat"":""Ù¾ÙØ§Ù ØªØ´Ø±ÙÙØ§Øª"",
			""irCarPlateTarikhi"":""Ù¾ÙØ§Ù ØªØ´Ø±ÙÙØ§Øª ØªØ§Ø±ÙØ®Ù"",
			""irCarPlateMotor"":""Ù¾ÙØ§Ù ÙÙØªÙØ± Ø³ÙÙÙØª"",
			""irMobile"":""Ø´ÙØ§Ø±Ù ÙÙØ¨Ø§ÙÙ Ø§ÙØ±Ø§Ù"",
			""irPostalCode"":""ÙØ¯Ù¾Ø³ØªÙ"",
			""irPhoneNo"":""Ø´ÙØ§Ø±Ù ØªÙÙÙ"",
			""IpV4"":""Ø¢Ù Ù¾Ù ÙØ±ÚÙ 4"",
			""IpV6"":""Ø¢Ù Ù¾Ù ÙØ±ÚÙ 6"",
			""MAC"":""Mac Address"",
			""email"":""Ø§ÙÙÙÙ"",
			""DateLunar"":""ØªØ§Ø±ÙØ® ÙÙØ±Ù"",
			""DateSolar"":""ØªØ§Ø±ÙØ® Ø´ÙØ³Ù"",
			""Date"":""ØªØ§Ø±ÙØ® ÙÙÙØ§Ø¯Ù"",
			""Date8Lunar"":""ØªØ§Ø±ÙØ® ÙÙØ±Ù 8 Ø±ÙÙÙ"",
			""Date6Lunar"":""ØªØ§Ø±ÙØ® ÙÙØ±Ù 6 Ø±ÙÙÙ"",
			""DateYLunar"":""Ø³Ø§Ù ØªØ§Ø±ÙØ® ÙÙØ±Ù"",
			""Date8Solar"":""ØªØ§Ø±ÙØ® Ø´ÙØ³Ù 8 Ø±ÙÙÙ"",
			""Date6Solar"":""ØªØ§Ø±ÙØ® Ø´ÙØ³Ù 6 Ø±ÙÙÙ"",
			""DateYSolar"":""Ø³Ø§Ù ØªØ§Ø±ÙØ® Ø´ÙØ³Ù"",
			""Date8"":""ØªØ§Ø±ÙØ® ÙÙÙØ§Ø¯Ù 8 Ø±ÙÙÙ"",
			""Date6"":""ØªØ§Ø±ÙØ® ÙÙÙØ§Ø¯Ù 6 Ø±ÙÙÙ"",
			""DateY"":""Ø³Ø§Ù ØªØ§Ø±ÙØ® ÙÙÙØ§Ø¯Ù"",
			""DateM"":""ÙØ§Ù ØªØ§Ø±ÙØ® ÙÙÙØ§Ø¯Ù"",
			""DateD"":""Ø±ÙØ² ØªØ§Ø±ÙØ® ÙÙÙØ§Ø¯Ù"",
			""Time"":""Ø³Ø§Ø¹Øª Ù Ø¯ÙÙÙÙ ÙØ«Ø§ÙÙÙ"",
			""TimeHM"":""Ø³Ø§Ø¹Øª Ù Ø¯ÙÙÙÙ"",
			""TimeH"":""Ø³Ø§Ø¹Øª"",
			""TimeM"":""Ø¯ÙÙÙÙ"",
			""TimeS"":""Ø«Ø§ÙÙÙ"",
			""TimeFa"":""Ø³Ø§Ø¹Øª Ù Ø¯ÙÙÙÙ ÙØ«Ø§ÙÙÙ ÙØ§Ø±Ø³Ù"",
			""TimeHMFa"":""Ø³Ø§Ø¹Øª Ù Ø¯ÙÙÙÙ ÙØ§Ø±Ø³Ù"",
			""TimeHFa"":""Ø³Ø§Ø¹Øª ÙØ§Ø±Ø³Ù"",
			""TimeMFa"":""Ø¯ÙÙÙÙ ÙØ§Ø±Ø³Ù"",
			""TimeSFa"":""Ø«Ø§ÙÙÙ ÙØ§Ø±Ø³Ù"",
			""uriTemplate"":"""",
			""Hostname"":""ÙØ§Ù ÙØ§Ø³Øª"",
			""URL"":""Ø¢Ø¯Ø±Ø³ ÙØ¨ Ø³Ø§ÙØª"",
			""dataURL"":"""",
			""json"":""Json"",
			""URI"":"""",
			""URIReference"":"""",
			""GUID"":""GUID"",
			""irireference"":"""",
			""UUID"":"""",
			""FileName"":""ÙØ§Ù ÙØ§ÙÙ"",
			""AllPath"":""ÙØ³ÙØ± ÙØ§ÙÙ"",
			""DrivePath"":""ÙØ³ÙØ± ÙØ§ÙÙ Ø±ÙÙ Ø¯Ø±Ø§ÙÙ"",
			""NetworkPath"":""ÙØ³ÙØ± ÙØ§ÙÙ Ø±ÙÙ Ø´Ø¨ÙÙ"",
			""AllPathFileName"":""ÙØ³ÙØ± ÙØ§ÙÙ ÙØ§ÙÙ Ù ÙØ§Ù ÙØ§ÙÙ"",
			""DrivePathFileName"":""ÙØ³ÙØ± ÙØ§ÙÙ ÙØ§ÙÙ Ù ÙØ§Ù ÙØ§ÙÙ Ø±ÙÙ Ø¯Ø±Ø§ÙÙ"",
			""NetworkPathFileName"":""ÙØ³ÙØ± ÙØ§ÙÙ ÙØ§ÙÙ Ù ÙØ§Ù ÙØ§ÙÙ Ø±ÙÙ Ø´Ø¨ÙÙ"",
			""alpha"":""ÙÙØ· Ø­Ø±ÙÙ Ø§ÙÚ¯ÙÙØ³Ù Ù Ø¬Ø§Ù Ø®Ø§ÙÙ"",
			""alphaDash"":""ÙÙØ· Ø­Ø±ÙÙ Ø§ÙÚ¯ÙÙØ³Ù ÙØ¹Ø¯Ø¯ Ù Ø¯Ø´"",
			""alphaNum"":""ÙÙØ· Ø­Ø±ÙÙ Ø§ÙÚ¯ÙÙØ³Ù ÙØ¹Ø¯Ø¯"",
			""alphaFa"":""ÙÙØ· Ø­Ø±ÙÙ ÙØ§Ø±Ø³Ù Ù Ø¬Ø§Ù Ø®Ø§ÙÙ"",
			""alphaNumFa"":""ÙÙØ· Ø­Ø±ÙÙ ÙØ§Ø±Ø³Ù ÙØ¹Ø¯Ø¯"",
			""alphaDashFa"":""ÙÙØ· Ø­Ø±ÙÙ ÙØ§Ø±Ø³Ù ÙØ¹Ø¯Ø¯ Ù Ø¯Ø´"",
			""alphaSpecialCharWritable"":""ÙÙØ· Ø­Ø±ÙÙ Ø§ÙÚ¯ÙÙØ³Ù Ù ÙÙØ´ØªØ§Ø±Ù"",
			""alphaFaSpecialCharWritable"":""ÙÙØ· Ø­Ø±ÙÙ ÙØ§Ø±Ø³Ù Ù ÙÙØ´ØªØ§Ø±Ù"",
			""alphaAll"":""ÙÙØ· Ø­Ø±ÙÙ ÙØ§Ø±Ø³Ù ÙØ§ÙÚ¯ÙÙØ³Ù Ù ÙÙØ´ØªØ§Ø±Ù"",
			""irCarPlateAll"":""ÙÙÙ Ù¾ÙØ§Ù ÙØ§"",
			""IP"":""Ø¢Ù Ù¾Ù"",
			""DateTime"":""ØªØ§Ø±ÙØ® Ù Ø³Ø§Ø¹Øª ÙØ§ÙÙ ÙÙÙØ§Ø¯Ù"",
			""DateTimeSolar"":""ØªØ§Ø±ÙØ® Ù Ø³Ø§Ø¹Øª ÙØ§ÙÙ Ø´ÙØ³Ù"",
			""DateTimeLunar"":""ØªØ§Ø±ÙØ® Ù Ø³Ø§Ø¹Øª ÙØ§ÙÙ ÙÙØ±Ù"",
			""DateTimeHM"":""ØªØ§Ø±ÙØ® Ù Ø³Ø§Ø¹Øª Ù Ø¯ÙÙÙÙ ÙÙÙØ§Ø¯Ù"",
			""DateTimeHMSolar"":""ØªØ§Ø±ÙØ® Ù Ø³Ø§Ø¹Øª Ù Ø¯ÙÙÙÙ Ø´ÙØ³Ù"",
			""DateTimeHMLunar"":""ØªØ§Ø±ÙØ® Ù Ø³Ø§Ø¹Øª Ù Ø¯ÙÙÙÙ ÙÙØ±Ù"",
			""DateTimeH"":""ØªØ§Ø±ÙØ® Ù Ø³Ø§Ø¹Øª ÙÙÙØ§Ø¯Ù"",
			""DateTimeHSolar"":""ØªØ§Ø±ÙØ® Ù Ø³Ø§Ø¹Øª Ø´ÙØ³Ù"",
			""DateTimeHLunar"":""ØªØ§Ø±ÙØ® Ù Ø³Ø§Ø¹Øª ÙÙØ±Ù"",
			""irIBAN"":""Ø´ÙØ§Ø±Ù Ø´Ø¨Ø§ Ø¨Ø§ÙÙÙ"",
			""irCardNum"":""Ø´ÙØ§Ø±Ù ÙØ§Ø±Øª Ø¨Ø§ÙÙÙ"",
			""irNationalCode"":""ÙØ¯/Ø´ÙØ§Ø³Ù ÙÙÙ"",
			""irNationalCodeCo"":""Ø´ÙØ§Ø³Ù ÙÙÙ"",
			""irNationalCodePerson"":""ÙØ¯ÙÙÙ"",
			""PasswordWeak"":""Ù¾Ø³ÙØ±Ø¯ Ø³Ø§Ø¯Ù"",
			""PasswordGood"":""Ù¾Ø³ÙØ±Ø¯ Ø®ÙØ¨"",
			""PasswordStrong"":""Ù¾Ø³ÙØ±Ø¯ Ø¯Ø´ÙØ§Ø±"",
			""PassworVeryStrong"":""Ù¾Ø³ÙØ±Ø¯ Ø®ÙÙÙ Ø¯Ø´ÙØ§Ø±"",
			}");
		static dynamic	xMessage= JObject.Parse(@"{
			""Error"":{
				""ValueNotFound"":""ÙØ¬ÙØ¯ ÙØ¯Ø§Ø±Ø¯"",
				""Required"":""Ø§ÙØ²Ø§ÙÛ Ø§Ø³Øª"",
				""ValidationType"":""{0}  Ø¨Ø§Ø´Ø¯"",
				""Equal"":""Ø¨Ø±Ø§Ø¨Ø± {0} Ø¨Ø§Ø´Ø¯"",
				""NotEqual"":""ÙØ§Ø¨Ø±Ø§Ø¨Ø± {0} Ø¨Ø§Ø´Ø¯"",
				""Min"":""Ø¨Ø²Ø±Ú¯ØªØ± Ø§Ø² {0} Ø¨Ø§Ø´Ø¯"",
				""MinEq"":""Ø¨Ø²Ø±Ú¯ØªØ± ÛØ§ ÙØ³Ø§ÙÛ {0} Ø¨Ø§Ø´Ø¯"",
				""Max"":""Ú©ÙÚÚ©ØªØ± Ø§Ø² {0} Ø¨Ø§Ø´Ø¯"",
				""MaxEq"":""Ú©ÙÚÚ©ØªØ± ÛØ§ ÙØ³Ø§ÙÛ {0} Ø¨Ø§Ø´Ø¯"",
				""Between"":""Ø¨ÛÙ {0} Ù {1}Ø¨Ø§Ø´Ø¯"",
				""OutBetween"":""Ø®Ø§Ø±Ø¬ Ø§Ø² {0} Ù {1} Ø¨Ø§Ø´Ø¯"",
				""In"":""Ø¯Ø± ÙÛØ³Øª {0} Ø¨Ø§Ø´Ø¯"",
				""NotIn"":""Ø®Ø§Ø±Ø¬ Ø§Ø² ÙÛØ³Øª {0} Ø¨Ø§Ø´Ø¯"",
				""StringSize"":""{0} Ú©Ø§Ø±Ø§Ú©ØªØ± Ø¨Ø§Ø´Ø¯"",
				""StringMinlen"":""Ø¨ÛØ´ØªØ± Ø§Ø² {0} Ú©Ø§Ø±Ø§Ú©ØªØ± Ø¨Ø§Ø´Ø¯"",
				""StringMaxlen"":""Ú©ÙØªØ± Ø§Ø² {0} Ú©Ø§Ø±Ø§Ú©ØªØ± Ø¨Ø§Ø´Ø¯"",
				""StringBetweenlen"":""Ø¨ÛÙ {1} ØªØ§ {0} Ú©Ø§Ø±Ø§Ú©ØªØ± Ø¨Ø§Ø´Ø¯"",
				""StringOutBetweenlen"":""Ú©ÙØªØ± Ø§Ø² {1} ÛØ§ Ø¨ÛØ´ØªØ± Ø§Ø² {0}Ú©Ø§Ø±Ø§Ú©ØªØ± Ø¨Ø§Ø´Ø¯Ø¯"",
				""ArraySize"":""Ø·ÙÙ Ø¢Ø±Ø§ÛÙ {0} Ø¨Ø§Ø´Ø¯Ø¯"",
				""ArrayMinlen"":""Ø·ÙÙ Ø¢Ø²Ø§ÛÙ Ø¨ÛØ´ØªØ± Ø§Ø² {0}  Ø¨Ø§Ø´Ø¯"",
				""ArrayMaxlen"":""Ø·ÙÙ Ø¢Ø±Ø§ÛÙ Ú©ÙØªØ± Ø§Ø² {0}  Ø¨Ø§Ø´Ø¯"",
				""ArrayBetweenlen"":""Ø·ÙÙ Ø¢Ø±Ø§ÛÙ Ø¨ÛÙ {1} ØªØ§ {0}  Ø¨Ø§Ø´Ø¯"",
				""ArrayOutBetweenlen"":""Ø·ÙÙ Ø¢Ø±Ø§ÛÙ Ú©ÙØªØ± Ø§Ø² {1} ÛØ§ Ø¨ÛØ´ØªØ± Ø§Ø² {0}  Ø¨Ø§Ø´Ø¯"",
				""FileType"":""Ø·ÙÙ Ø¢Ø±Ø§ÛÙ Ú©ÙØªØ± Ø§Ø² {1} ÛØ§ Ø¨ÛØ´ØªØ± Ø§Ø² {0}  Ø¨Ø§Ø´Ø¯"",
				""FileExt"":""Ù¾Ø³ÙÙØ¯ ÙØ§ÛÙ ÛÚ©Û Ø§Ø² ÙÙØ§Ø±Ø¯ {0} Ø¨Ø§Ø´Ø¯"",
				""FileMime"":""Ø·ÙÙ Ø¢Ø±Ø§ÛÙ Ú©ÙØªØ± Ø§Ø² {1} ÛØ§ Ø¨ÛØ´ØªØ± Ø§Ø² {0}  Ø¨Ø§Ø´Ø¯"",
				""FileSize"":""Ø­Ø¬Ù ÙØ§ÛÙ {0}Ú©ÛÙÙØ¨Ø§ÛØª Ø¨Ø§Ø´Ø¯"",
				""FileMinlen"":""Ø­Ø¬Ù ÙØ§ÛÙ Ø¨ÛØ´ØªØ± Ø§Ø² {0} Ú©ÛÙÙØ¨Ø§ÛØª Ø¨Ø§Ø´Ø¯"",
				""FileMaxlen"":""Ø­Ø¬Ù ÙØ§ÛÙ Ú©ÙØªØ± Ø§Ø² {0} Ú©ÛÙÙØ¨Ø§ÛØª Ø¨Ø§Ø´Ø¯"",
				""FileBetweenlen"":""Ø­Ø¬Ù ÙØ§ÛÙ Ø¨ÛÙ {0} ØªØ§ {1} Ú©ÛÙÙØ¨Ø§ÛØª Ø¨Ø§Ø´Ø¯"",
				""FileOutBetweenlen"":""Ø­Ø¬Ù ÙØ§ÛÙ Ú©ÙØªØ± Ø§Ø² {0} ÛØ§ Ø¨ÛØ´ØªØ± Ø§Ø² {1} Ú©ÛÙÙØ¨Ø§ÛØª Ø¨Ø§Ø´Ø¯"",
				""Pattern"":""Ø§ÙÚ¯ÙÛ {0} ÙØ¹ØªØ¨Ø± ÙÛØ³Øª"",
				""NoPattern"":""Ø§ÙÚ¯ÙÛ {0} ÙØ¨Ø§ÛØ¯ ÙØ¹ØªØ¨Ø± Ø¨Ø§Ø´Ø¯"",
				""Regex"":""Ø§ÙÚ¯Ù {0} ÙØ¹ØªØ¨Ø± ÙÛØ³Øª"",
				""NoRegex"":""Ø§ÙÚ¯ÙÛ {0} ÙØ¨Ø§ÛØ¯ ÙØ¹ØªØ¨Ø± Ø¨Ø§Ø´Ø¯"",
				""Distinct"":""Ø¯Ø± Ø¢Ø±Ø§ÛÙ ØªÚ©Ø±Ø§Ø±Û ÙØ¨Ø§Ø´Ø¯"",
				""Filled"":""Ø®Ø§ÙÛ ÙØ¨Ø§Ø´Ø¯"",
				""ImageSizeW"":""Ø¹Ø±Ø¶ ØªØµÙÛØ± {0} Ù¾ÛÚ©Ø³Ù Ø¨Ø§Ø´Ø¯"",
				""ImageMinW"":""Ø­Ø¯Ø§ÙÙ Ø¹Ø±Ø¶ ØªØµÙÛØ± {0} Ø¨Ø§Ø´Ø¯"",
				""ImageMaxW"":""Ø­Ø¯Ø§Ú©Ø«Ø± Ø¹Ø±Ø¶ ØªØµÙÛØ± {0} Ø¨Ø§Ø´Ø¯"",
				""ImageSizeH"":""Ø§Ø±ØªÙØ§Ø¹ ØªØµÙÛØ± {0} Ù¾ÛÚ©Ø³Ù Ø¨Ø§Ø´Ø¯"",
				""ImageMinH"":""Ø­Ø¯Ø§ÙÙ Ø§Ø±ØªÙØ§Ø¹ ØªØµÙÛØ± {0} Ø¨Ø§Ø´Ø¯"",
				""ImageMaxH"":""Ø­Ø¯Ø§Ú©Ø«Ø± Ø§Ø±ØªÙØ§Ø¹ ØªØµÙÛØ± {0} Ø¨Ø§Ø´Ø¯"",
				""ImageRatio"":""ÙØ³Ø¨Øª Ø·ÙÙ Ø¨Ù Ø¹Ø±Ø¶ {0} Ø¨Ø§Ø´Ø¯"",
				""ImageMinRatio"":""Ø­Ø¯Ø§ÙÙ ÙØ³Ø¨Øª Ø·ÙÙ Ø¨Ù Ø¹Ø±Ø¶ {0} Ø¨Ø§Ø´Ø¯"",
				""ImageMaxRatio"":""Ø­Ø¯Ø§Ú©Ø«Ø± ÙØ³Ø¨Øª Ø·ÙÙ Ø¨Ù Ø¹Ø±Ø¶ {0} Ø¨Ø§Ø´Ø¯"",
				""ImageBetweenWidth"":""Ø¹Ø±Ø¶ ØªØµÙÛØ± Ø¨ÛÙ {1} Ù {0} Ù¾ÛÚ©Ø³Ù Ø¨Ø§Ø´Ø¯"",
				""ImageBetweenHeight"":""Ø§Ø±ØªÙØ§Ø¹ ØªØµÙÛØ± Ø¨ÛÙ {1} Ù {0} Ù¾ÛÚ©Ø³Ù Ø¨Ø§Ø´Ø¯"",
				""ImageBetweenRatio"":""ÙØ³Ø¨Øª Ø·ÙÙ Ø¨Ù Ø¹Ø±Ø¶ ØªØµÙÛØ± Ø¨ÛÙ  {0} ØªØ§  {1} Ø¨Ø§Ø´Ø¯"",
				""After"":""Ø¨Ø²Ø±Ú¯ØªØ± Ø§Ø²  {0} Ø¨Ø§Ø´Ø¯"",
				""AfterEq"":""Ø¨Ø²Ø±Ú¯ØªØ± ÛØ§ ÙØ³Ø§ÙÛ {0} Ø¨Ø§Ø´Ø¯"",
				""Before"":""Ú©ÙÚÚ©ØªØ± Ø§Ø² {0} Ø¨Ø§Ø´Ø¯"",
				""BeforeEq"":""Ú©ÙÚÚ©ØªØ± ÛØ§ ÙØ³Ø§ÙÛ {0} Ø¨Ø§Ø´Ø¯"",
				""Same"":""ÙØ³Ø§ÙÛ {0} Ø¨Ø§Ø´Ø¯"",
				""Different"":""ÙØ§ÙØ³Ø§ÙÛ Ø¨Ø§ {0} Ø¨Ø§Ø´Ø¯"",
				""RequiredIf"":""Ø§ÙØ²Ø§ÙÛ Ø§Ø³Øª (Ø¯Ø± ØµÙØ±Øª Ù¾Ø± Ø¨ÙØ¯Ù {0} )"",
				""RequiredWith"":""Ø­Ø¯Ø§ÙÙ ÛÚ©Û Ø§Ø²  {0} Ø§ÙØ²Ø§ÙÛ Ø§Ø³Øª"",
				""RequiredWithAll"":""{0} Ø§ÙØ²Ø§ÙÛ Ø§Ø³Øª"",
				""RequiredWithOut"":""Ø­Ø¯Ø§ÙÙ ÛÚ©Û Ø§Ø² {0} Ø®Ø§ÙÛ Ø¨Ø§Ø´Ø¯"",
				""RequiredWithOutAll"":""{0} Ø®Ø§ÙÛ Ø¨Ø§Ø´Ø¯"",
				""NotFound"":""ÙØ§ÙÙØ¬ÙØ¯""
			},
			""Oprator"":{
					""And"": "" Ù "",
					""Or"": "" ÛØ§ "",
					""Sep"": "" | "",
					""SepLine"": ""<br>""
			},
			""Rule"":{
				""RangeLen2"":""RangeLen2"",
				""Range0IsNaN"":""Range0IsNaN"",
				""Range1IsNaN"":""Range1IsNaN"",
				""ArrayLenNotZero"":""ArrayLenNotZero"",
				""RuleIsEmpty"":""RuleIsEmpty"",
				""ValuesIsEmpty"":""ValuesIsEmpty"",
				""ParamIsNaN"":""ParamIsNaN"",
				""PatternNotFound"":""PatternNotFound"",
				""NotFileExt"":""NotFileExt"",
				""NotFileMime"":""NotFileMime"",
				""ArrayTypeMimeIsZero"":""ArrayTypeMimeIsZero"",
				""ParamOrRuleIsNaN"":""ParamOrRuleIsNaN"",
				""ParamIsNotInJsDate"":""ParamIsNotInJsDate"",
				""DifferenceOfType"":""DifferenceOfType""
			}
		}");
		public static class  JSONSchemaValidator  {
			public static dynamic vM = new Object();
			public static string ver() {
				return "2.0f.0";
			}
			public static string help() {
				string info= "tver()rnthelp()rntpatternhelp()rntvalidate(dataJs, ruleJs)";
				return info;
			}
			public static string patternhelp(){
				string ret="";
				//ToDo:
				//FIXME_VAR_TYPE k=Object.keys(pattern).forEach(f=>ret.push({Name:f,Title:xMessagePatt[f]}));
				return ret;
			}
			/**
			* @dataJs comes from: formTools().formToJsonData(formId)
			* @param {array json} dataJs
			* @param {array json} ruleJs
			* @returns json containing errors
			*/
			public static dynamic validate (dynamic dataJs,dynamic  ruleJs) {
				vM = xMessage;
				dynamic retJs= JObject.Parse(@"{""isValid"": true,""totalErr"": """",""errorFields"": [],""errorsField"": {},""errorFieldCount"": 0}");
				string Sep= "";
				if(!(ruleJs.ContainsKey("Fields"))) return retJs;
				string ruleFields= ruleJs["Fields"];
				//foreach(var key in ruleFields) {
				string errtxt= "";
				bool isValid;
				string fieldName="";
				string fieldType = null;
				string fieldLabel="";
				dynamic fieldValue;
				string errtxtTot="";
				bool hasData=false;
				foreach(dynamic rj in ruleFields) {
					errtxt = "";
					isValid=true;
					
					fieldName =(rj.ContainsKey("Name")) ?rj.Name :( (rj.ContainsKey("name")) ?rj.name :((rj.ContainsKey("InputName")) ? rj["InputName"]:((rj.ContainsKey("DataName")) ? rj["DataName"]:"")));
					if(fieldName!=""){
						fieldLabel =  (rj.ContainsKey("Label")) ? rj.Label : ((rj.ContainsKey("label")) ?rj.label : fieldName);
						fieldType=(rj.ContainsKey("Type")) ? rj.Type :((rj.ContainsKey("type")) ? rj.type :((rj.ContainsKey("FieldType")) ? rj.FieldType :((rj.ContainsKey("fieldType")) ? rj.fieldType :((rj.ContainsKey("fieldtype")) ? rj.fieldtype :((rj.ContainsKey("DataType")) ? rj.DataType :((rj.ContainsKey("dataType")) ? rj.dataType :((rj.ContainsKey("datatype")) ? rj.datatype :(null))))))));
						fieldValue = null;
						string Req=((rj.ContainsKey("Required")) ? rj.Required :(rj.ContainsKey("required")) ? rj.required : ((rj.ContainsKey("isRequired")) ?  rj.isRequired : ((rj.ContainsKey("ValidateRequired")) ?  rj.ValidateRequired : "false")));
						bool isRequired=((Req.Equals("true"))||(Req.Equals("1"))) ? true : false;
						bool hasField=dataJs.ContainsKey(fieldName);
						if(hasField){
							fieldValue =dataJs[fieldName];
							if(fieldType==null)
								fieldType =(((fieldValue==null) || ("undefined".Equals(typeOf(fieldValue))))) ? null :((typeOf(fieldValue)=="object") ? (typeOf(fieldValue)=="Array" ? "array":"object"): typeOf(fieldValue));
							hasData=!((fieldType == null)
									||(((fieldType=="string")||(fieldType=="number"))&&((fieldValue.ToString()=="")))
									||((fieldType=="object")&&(!(fieldValue.ContainsKey("fileSize"))))
									||((fieldType=="object")&&(fieldValue.ContainsKey("fileSize"))&&(fieldValue.fileSize==0))
									||((fieldType=="file")&&(!(fieldValue.ContainsKey("fileSize"))))
									||((fieldType=="file")&&(fieldValue.ContainsKey("fileSize"))&&(fieldValue.fileSize==0))
									||((fieldType=="image")&&(fieldValue.ContainsKey("type"))&&(fieldValue.fileSize==0))
									||((fieldType=="image")&&(fieldValue.ContainsKey("type"))&&(fieldValue.type.Substring(0,5)=="image"))
									||((fieldType=="array")&&(fieldValue.Length==0)));
						}
						if (isRequired && (!(hasField && hasData))) {
							errtxt = ((hasField==false) ? vM.Error.ValueNotFound: vM.Error.Required);
						}
						if(hasData){
							if ((rj.ContainsKey("ValidationType")) ||(rj.ContainsKey("validationType"))||(rj.ContainsKey("validationtype")) ){
								string vType="";
								if (rj.ContainsKey("ValidationType")){ vType=rj["ValidationType"] || "";}
									else if (rj.ContainsKey("validationType")){ vType=rj["validationType"] || "";}
										else if (rj.ContainsKey("validationtype")){ vType=rj["validationtype"] || "";}
								vType=vType.Trim();
								if (vType != "") {
									//check ValidationType
									if (!ValidationType(fieldValue, rj.ValidationType)) {
										errtxt +=(errtxt =="" ? "":vM.Oprator.Sep)+   vM.Error.ValidationType.format(rj.ValidationType);
										//outJs.errorFieldCount++;
									}
								}
							}
							if ((rj.ContainsKey("ValidationValue")) ||(rj.ContainsKey("validationValue"))||(rj.ContainsKey("Validationvalue")) ){
								string vValue="";
								if (rj.ContainsKey("ValidationValue")){ vValue=rj["ValidationValue"] || "";}
									else if (rj.ContainsKey("validationValue")){ vValue=rj["validationValue"] || "";}
										else if (rj.ContainsKey("Validationvalue")){ vValue=rj["Validationvalue"] || "";};
								vValue=vValue.Trim();
								if (vValue != "") {
									//check ValidationValue
									dynamic validationVal= ValidationValues(fieldValue,vValue);
									if (!validationVal["valid"]) {
										errtxt+=(errtxt==""?"":vM.Oprator.Sep)+validationVal["msg"];;
									}
								}
							}
							if((rj.ContainsKey("ValidationOthers")) || (rj.ContainsKey("ValidationOther"))||(rj.ContainsKey("validationOthers")) || (rj.ContainsKey("validationOther"))||(rj.ContainsKey("validationothers")) || (rj.ContainsKey("validationother")) || rj.ContainsKey("ValidationOtherFields")){
								string vOther="";
								if (rj.ContainsKey("ValidationOthers")) vOther=rj["ValidationOthers"] || "";
									else if (rj.ContainsKey("ValidationOther")) vOther=rj["ValidationOther"] || "";
										else if (rj.ContainsKey("validationOthers")) vOther=rj["validationOthers"] || "";
											else if (rj.ContainsKey("validationOther")) vOther=rj["validationOther"] || "";
												else if (rj.ContainsKey("validationothers")) vOther=rj["validationothers"] || "";
													else if (rj.ContainsKey("validationother")) vOther=rj["validationother"] || "";
														else if (rj.ContainsKey("ValidationOtherFields")) vOther=rj["ValidationOtherFields"] || "";
								vOther=vOther.Trim();
								if (vOther != "") {
									//check ValidationOtherField
									dynamic validationVal= ValidationOtherFields(fieldValue,vOther,dataJs,ruleJs);
									if (!validationVal["valid"]) {
										errtxt += (errtxt==""?"":vM.Oprator.Sep)+validationVal["msg"];
									}
								}
							}
						}
						if(errtxt!=""){
							retJs.isValid = false;
							retJs.totalErr += Sep + fieldLabel+ ":" +  errtxt;
						//retJs.errorFieldCount += 1;
							dynamic pp= new JObject();
							pp.fieldname=fieldName;
							pp.Message=errtxt;
							retJs.errorFields.push(pp);
							retJs.errorsField[fieldName]=((retJs.errorsField.ContainsKey(fieldName) ) ? retJs.errorsField[fieldName] +vM.Oprator.Sep :"")+ errtxt;
							errtxtTot += Sep + errtxt;
							Sep = vM.Oprator.SepLine;
						//--
						}
					}
				};
				retJs.errorFieldCount = retJs.errorFields.Length;
				return retJs;
			}
			/**
			* @val value of input
			* @TypeName number or int or bigint or integer or num or int| real or float| string| bool  or bool or bit| array| object
			* @param {string} val
			* @param {string} TypeName
			* @returns bool
			*/
			static bool  ValidationType(dynamic val,string  TypeName = "") {
				TypeName = TypeName.ToLower();

				if (TypeName == "number" || TypeName == "int" || TypeName == "bigint" || TypeName == "integer" || TypeName == "num" ||TypeName == "real" || TypeName == "float") {
					int vv;
					if(!int.TryParse(val,out vv))return false;
					if (!(TypeName == "real" || TypeName == "float"))
						if (vv % 1 != 0)return false;
				}
				if (TypeName == "boolean" || TypeName == "bool" || TypeName == "bit") {
					if (typeOf(val) != "boolean")
						return false;
				}
				if (TypeName == "string") {
					if (typeOf(val) != "string")
						return false;
				}
				if (TypeName == "array") {
					if (!typeOf(val)=="Array")
						return false;
				}
				if (TypeName == "file") {
					if (typeOf(val) !="object")return false;
					if(!(val.ContainsKey("fileSize")))return false;
					if(val["fileSize"]==0)return false;
				}
				if (TypeName == "image") {
					if (typeOf(val) !="object")return false;
					if(!(val.ContainsKey("fileSize")))return false;
					if(val.fileSize==0)return false;
					if(!(val.ContainsKey("fileType")))return false;
					if(val.fileType.substr(0,5)!="image")return false;
				}
				if (TypeName == "date") {
					if (typeOf(val) != "string")return false;
					if(val.Length!=10)return false;
					string patt="/^(("+pattern["DatesSolar"]["Pat"]+")|("+pattern["DateLunar"]["Pat"]+")|("+pattern["Date"]["Pat"]+")|("+"))$/";
					Regex regx= new Regex(patt);
					return regx.IsMatch(val);
				}
				if (TypeName == "datetime" || TypeName == "fulldate") {
					if (typeOf(val) != "string")return false;
					string patt="/^(("+pattern["DateSolar"]["Pat"]+")|("+pattern["DateLunar"]["Pat"]+")|("+pattern["Date"]["Pat"]+")|("+") ("+pattern["TimeFa"]["Pat"]+"))$/";
					Regex regx= new Regex(patt);
					return regx.IsMatch(val);
				}
				if (TypeName == "time") {
					if (typeOf(val) != "string")return false;
					string patt="/^("+pattern["TimeFa"]["Pat"]+")$/";
					Regex regx= new Regex(patt);
					return regx.IsMatch(val);
					}
				return true;
			}
			/**
			* @val value of input
			* @rules seperated by ;	example:"Max:18 ; Between:1,20"
			* @param {string} val
			* @param {string} rules
			* @returns json array containing errors
			*/
			private static dynamic ValidationValues (dynamic val ,dynamic rules) {
				dynamic ret = new JObject();
				ret.valid=true;
				ret.msg="";
				if (val == null) return ret;
				//rule example :	"Max:18 ; Between:1,20"
				var rule = ((string)rules).Trim().Split(";").Where(el => !(el is null || el.Trim()=="")).ToArray();
				string msg= "";
				bool valid= true;
				string sep = "";
				foreach(var element in rule){
					var RP=element.Split(":");
					string m= "";
					string P= "";
					if(RP.Length==2 || RP.Length==1){
						string R=RP[0].ToLower();
						if(RP.Length==2){
							P=RP[1]; 
							m = ValidationValue(val,R,P); //example: validationValue("91", "equal:114","userName")
						}else if(R=="distinct"){
							m = ValidationValue(val,R,""); //example: ValidationValue("91", "equal:114","userName")
						}
						if (m!="") {valid = false;msg += sep + m;sep = vM.Oprator.Sep;}
					}
				};
				ret.valid= valid;
				ret.msg= msg;
				return ret;
			}
			/**
			* example of param: 1,20
			* @val value of input
			* @rule example: Between
			* @param {string} rule
			* @param {string} param
			* @returns string
			*/
			static string ValidationValue(dynamic val, string rule = "", dynamic param =null) {
				if (rule == "" || rule==null) return vM.Rule.RuleIsEmpty;
				if (val==null) return vM.Rule.ValuesIsEmpty;
				param = param ?? "";
				rule = rule.ToLower().Trim();
				//--âBoolean ---------------------------------------------------------------
				if (typeOf(val)== "boolean" ) {
					if(param=="true" || param=="1"|| param=="false" ||  param=="0"){
						bool nparam=(param=="true" || param=="1" );
						bool nval=(val=="true" || val=="1" );
						if (rule == "equal") {if (!(nval == nparam ))return vM.Error.Equal.format(param);}
						if (rule == "notequal") {if (!(nval != nparam))return vM.Error.NotEqual.format(param);}
					}
				}
				//--Number ---------------------------------------------------------------
				if (typeOf(val) == "number" ) {
					int nval=int.Parse(val);
					if(rule == "equal" || rule == "notequal" || rule == "min" || rule == "mineq" || rule == "max" || rule == "maxeq"){
						int nparam;
						if(!int.TryParse(param,out nparam))return vM.Rule.ParamIsNaN;
						if (rule == "equal") {if (!(nval == nparam ))return vM.Error.Equal.format(param);}
						if (rule == "notequal") {if (!(nval != nparam))return vM.Error.NotEqual.format(param);}
						if (rule == "min") {if (!(nval > nparam))return vM.Error.Min.format(param);}
						if (rule == "mineq") {if (!(nval >= nparam))return vM.Error.MinEq.format(param);}
						if (rule == "max") {if (!(nval < nparam ))return vM.Error.Max.format(param);}
						if (rule == "maxeq") {if (!(nval <= nparam ))return vM.Error.Maxeq.format(param);}
					}
					if (rule == "between" || rule == "outbetween") {
						//param: 2,4
						int minRange,maxRange;
						var range = ((string)param).Split(",").Select(str =>str.Trim()).ToArray();
						if (range.Length != 2) return vM.Rule.RangeLen2;
						if (!int.TryParse(range[0],out minRange)) return vM.Rule.Range0IsNaN;
						if (!int.TryParse(range[1],out maxRange)) return vM.Rule.Range1IsNaN;
						if (rule == "between") {if (val < minRange || val > maxRange)return vM.Error.Between.format(range[0],range[1]);}
						if (rule == "outbetween") {if (val >= minRange && val  <= maxRange)return vM.Error.OutBetween.format(range[0],range[1]);}
					}
					if (rule == "in"||rule == "notin") {
						//param : ["orange","apple","moh"]
						var valsArr= (param is Array) ? param : ((string)param).Split(',').Select(str=>str.Trim()).ToArray();
						if (valsArr.Length == 0) return vM.Rule.ArrayLenNotZero;
						if (rule == "in"){if (valsArr.IndexOf(val) < 0)return vM.Error.In.format(valsArr.join(","));}
						if (rule == "notin"){if (valsArr.IndexOf(val) > -1) return vM.Error.NotIn.format(valsArr.join(","));}
					}
				}
				//--string or Number ---------------------------------------------------------------
				if ((typeOf(val) == "string") || (typeOf(val).Equals("number"))) {
					string vals = val.ToString().Trim();
					int nparam;
					if (rule == "size" || rule == "minlen" || rule == "maxlen") {
						if(!int.TryParse(param,out nparam))return vM.Rule.ParamIsNaN;
						if (rule == "size") {if (vals.Length != nparam)return vM.Error.StringSize.format(param);}
						if (rule == "minlen") {if (vals.Length <= nparam) return vM.Error.StringMinlen.format(param);}
						if (rule == "maxlen") {if (vals.Length >= nparam ) return vM.Error.StringMaxlen.format(param);}
					}
					if (rule == "betweenlen" || rule == "outbetweenlen") {
							var range= ((string)param).Split(",").ToArray();
							int minRange,maxRange;
							if (range.Length != 2) return vM.Rule.RangeLen2;
							if (!int.TryParse(range[0],out minRange)) return vM.Rule.Range0IsNaN;
							if (!int.TryParse(range[1],out maxRange)) return vM.Rule.Range1IsNaN;
							//param: 19,13
							if (rule == "betweenlen") {if (vals.Length < minRange || vals.Length > maxRange ) return vM.Error.Betweenlen.format(range[0],range[0]);}
							if (rule == "outbetweenlen") {if(vals.Length < minRange && vals.Length > maxRange)return vM.Error.OutBetweenlen.format(range[0],range[0]);}
					}
				}
				//--string ---------------------------------------------------------------
				if (typeOf(val) == "string") {
					val = val.Trim();
					if (rule == "equal") {if (!(val == param))return vM.Error.Equal.format(param);}
					if (rule == "notequal") {if (!(val != 1))return vM.Error.NotEqual.format(param);}
					if (rule == "min") {if (!(val > param))return vM.Error.Min.format(param);}
					if (rule == "mineq") {if (!(val >= param))return vM.Error.MinEq.format(param);}
					if (rule == "max") {if (!(val < param))return vM.Error.Max.format(param);}
					if (rule == "maxeq"){if (!(val <= param))return vM.Error.MaxEq.format(param);}
					if (rule == "between" || rule == "outbetween") {
						int minRange,maxRange;
						var range= ((string)param).Split(",").Select(str =>str.Trim()).ToArray();
						if (range.Count() != 2) return vM.Rule.RangeLen2;
						if (!int.TryParse(range[0],out minRange)) return  vM.Rule.Range0IsNaN;
						if (!int.TryParse(range[1],out maxRange)) return  vM.Rule.Range1IsNaN;
						if (rule == "between") {if (val < minRange || val > maxRange)return vM.Error.Between.format(range[0],range[1]);}
						if (rule == "outbetween") {if (val >= minRange && val  <= maxRange)return vM.Error.OutBetween.format(range[0],range[1]);}
					}
					if (rule == "in"||rule == "notin") {
						//param : ["orange","apple","moh"]
						var valsArr= (param is Array) ? (Array)param : param.Split(",");
						if (valsArr.Length == 0) return vM.Rule.ArrayLenNotZero;
						if (rule == "in"){if (valsArr.IndexOf(val) < 0)return vM.Error.In.format(valsArr.join(","));}
						if (rule == "notin"){if (valsArr.IndexOf(val) > -1) return vM.Error.NotIn.format(valsArr.join(","));}
					}
					//pARRERN REGEX-------------------------------------------------------
					if (rule == "pattern" || rule == "notpattern") {
						var p=((JObject)pattern).Properties().FirstOrDefault(st=>(st.Name.ToLower()==param.ToLower()));
						if(p is null)return  vM.Rule.PatternNotFound;
						bool v=PatternValidate((string)p.Name,val);
						if (rule == "pattern") return v ? "":vM.Error.Pattern.format(xMessagePatt[p]);
						if (rule == "notpattern") return v ? vM.Error.NoPattern.format(xMessagePatt[p]):"";
					}
					if (rule == "regex") {
						Regex regex= new Regex(param);
						if (!regex.IsMatch(val))
							return vM.Error.Regex.format(param);
						return  "";
						}
					if (rule == "notregex") {
						Regex regex= new Regex(param);
						if (regex.IsMatch(val))
							return vM.Error.NoRegex.format(param);
						return  "";
					}
					if (rule == "timezone") {
						string TZ=",Africa/Abidjan,Africa/Accra,Africa/Addis_Ababa,Africa/Algiers,Africa/Asmara,Africa/Bamako,Africa/Bangui,Africa/Banjul,Africa/Bissau,Africa/Blantyre,Africa/Brazzaville,Africa/Bujumbura,Africa/Cairo,Africa/Casablanca,Africa/Ceuta,Africa/Conakry,Africa/Dakar,Africa/Dar_es_Salaam,Africa/Djibouti,Africa/Douala,Africa/El_Aaiun,Africa/Freetown,Africa/Gaborone,Africa/Harare,Africa/Johannesburg,Africa/Juba,Africa/Kampala,Africa/Khartoum,Africa/Kigali,Africa/Kinshasa,Africa/Lagos,Africa/Libreville,Africa/Lome,Africa/Luanda,Africa/Lubumbashi,Africa/Lusaka,Africa/Malabo,Africa/Maputo,Africa/Maseru,Africa/Mbabane,Africa/Mogadishu,Africa/Monrovia,Africa/Nairobi,Africa/Ndjamena,Africa/Niamey,Africa/Nouakchott,Africa/Ouagadougou,Africa/Porto-Novo,Africa/Sao_Tome,Africa/Tripoli,Africa/Tunis,Africa/Windhoek,America/Adak,America/Anchorage,America/Anguilla,America/Antigua,America/Araguaina,America/Argentina/Buenos_Aires,America/Argentina/Catamarca,America/Argentina/Cordoba,America/Argentina/Jujuy,America/Argentina/La_Rioja,America/Argentina/Mendoza,America/Argentina/Rio_Gallegos,America/Argentina/Salta,America/Argentina/San_Juan,America/Argentina/San_Luis,America/Argentina/Tucuman,America/Argentina/Ushuaia,America/Aruba,America/Asuncion,America/Atikokan,America/Bahia,America/Bahia_Banderas,America/Barbados,America/Belem,America/Belize,America/Blanc-Sablon,America/Boa_Vista,America/Bogota,America/Boise,America/Cambridge_Bay,America/Campo_Grande,America/Cancun,America/Caracas,America/Cayenne,America/Cayman,America/Chicago,America/Chihuahua,America/Costa_Rica,America/Creston,America/Cuiaba,America/Curacao,America/Danmarkshavn,America/Dawson,America/Dawson_Creek,America/Denver,America/Detroit,America/Dominica,America/Edmonton,America/Eirunepe,America/El_Salvador,America/Fort_Nelson,America/Fortaleza,America/Glace_Bay,America/Goose_Bay,America/Grand_Turk,America/Grenada,America/Guadeloupe,America/Guatemala,America/Guayaquil,America/Guyana,America/Halifax,America/Havana,America/Hermosillo,America/Indiana/Indianapolis,America/Indiana/Knox,America/Indiana/Marengo,America/Indiana/Petersburg,America/Indiana/Tell_City,America/Indiana/Vevay,America/Indiana/Vincennes,America/Indiana/Winamac,America/Inuvik,America/Iqaluit,America/Jamaica,America/Juneau,America/Kentucky/Louisville,America/Kentucky/Monticello,America/Kralendijk,America/La_Paz,America/Lima,America/Los_Angeles,America/Lower_Princes,America/Maceio,America/Managua,America/Manaus,America/Marigot,America/Martinique,America/Matamoros,America/Mazatlan,America/Menominee,America/Merida,America/Metlakatla,America/Mexico_City,America/Miquelon,America/Moncton,America/Monterrey,America/Montevideo,America/Montserrat,America/Nassau,America/New_York,America/Nipigon,America/Nome,America/Noronha,America/North_Dakota/Beulah,America/North_Dakota/Center,America/North_Dakota/New_Salem,America/Nuuk,America/Ojinaga,America/Panama,America/Pangnirtung,America/Paramaribo,America/Phoenix,America/Port_of_Spain,America/Port-au-Prince,America/Porto_Velho,America/Puerto_Rico,America/Punta_Arenas,America/Rainy_River,America/Rankin_Inlet,America/Recife,America/Regina,America/Resolute,America/Rio_Branco,America/Santarem,America/Santiago,America/Santo_Domingo,America/Sao_Paulo,America/Scoresbysund,America/Sitka,America/St_Barthelemy,America/St_Johns,America/St_Kitts,America/St_Lucia,America/St_Thomas,America/St_Vincent,America/Swift_Current,America/Tegucigalpa,America/Thule,America/Thunder_Bay,America/Tijuana,America/Toronto,America/Tortola,America/Vancouver,America/Whitehorse,America/Winnipeg,America/Yakutat,America/Yellowknife,Antarctica/Casey,Antarctica/Davis,Antarctica/DumontDUrville,Antarctica/Macquarie,Antarctica/Mawson,Antarctica/McMurdo,Antarctica/Palmer,Antarctica/Rothera,Antarctica/Syowa,Antarctica/Troll,Antarctica/Vostok,Arctic/Longyearbyen,Asia/Aden,Asia/Almaty,Asia/Amman,Asia/Anadyr,Asia/Aqtau,Asia/Aqtobe,Asia/Ashgabat,Asia/Atyrau,Asia/Baghdad,Asia/Bahrain,Asia/Baku,Asia/Bangkok,Asia/Barnaul,Asia/Beirut,Asia/Bishkek,Asia/Brunei,Asia/Chita,Asia/Choibalsan,Asia/Colombo,Asia/Damascus,Asia/Dhaka,Asia/Dili,Asia/Dubai,Asia/Dushanbe,Asia/Famagusta,Asia/Gaza,Asia/Hebron,Asia/Ho_Chi_Minh,Asia/Hong_Kong,Asia/Hovd,Asia/Irkutsk,Asia/Jakarta,Asia/Jayapura,Asia/Jerusalem,Asia/Kabul,Asia/Kamchatka,Asia/Karachi,Asia/Kathmandu,Asia/Khandyga,Asia/Kolkata,Asia/Krasnoyarsk,Asia/Kuala_Lumpur,Asia/Kuching,Asia/Kuwait,Asia/Macau,Asia/Magadan,Asia/Makassar,Asia/Manila,Asia/Muscat,Asia/Nicosia,Asia/Novokuznetsk,Asia/Novosibirsk,Asia/Omsk,Asia/Oral,Asia/Phnom_Penh,Asia/Pontianak,Asia/Pyongyang,Asia/Qatar,Asia/Qostanay,Asia/Qyzylorda,Asia/Riyadh,Asia/Sakhalin,Asia/Samarkand,Asia/Seoul,Asia/Shanghai,Asia/Singapore,Asia/Srednekolymsk,Asia/Taipei,Asia/Tashkent,Asia/Tbilisi,Asia/Tehran,Asia/Thimphu,Asia/Tokyo,Asia/Tomsk,Asia/Ulaanbaatar,Asia/Urumqi,Asia/Ust-Nera,Asia/Vientiane,Asia/Vladivostok,Asia/Yakutsk,Asia/Yangon,Asia/Yekaterinburg,Asia/Yerevan,Atlantic/Azores,Atlantic/Bermuda,Atlantic/Canary,Atlantic/Cape_Verde,Atlantic/Faroe,Atlantic/Madeira,Atlantic/Reykjavik,Atlantic/South_Georgia,Atlantic/St_Helena,Atlantic/Stanley,Australia/Adelaide,Australia/Brisbane,Australia/Broken_Hill,Australia/Darwin,Australia/Eucla,Australia/Hobart,Australia/Lindeman,Australia/Lord_Howe,Australia/Melbourne,Australia/Perth,Australia/Sydney,Europe/Amsterdam,Europe/Andorra,Europe/Astrakhan,Europe/Athens,Europe/Belgrade,Europe/Berlin,Europe/Bratislava,Europe/Brussels,Europe/Bucharest,Europe/Budapest,Europe/Busingen,Europe/Chisinau,Europe/Copenhagen,Europe/Dublin,Europe/Gibraltar,Europe/Guernsey,Europe/Helsinki,Europe/Isle_of_Man,Europe/Istanbul,Europe/Jersey,Europe/Kaliningrad,Europe/Kiev,Europe/Kirov,Europe/Lisbon,Europe/Ljubljana,Europe/London,Europe/Luxembourg,Europe/Madrid,Europe/Malta,Europe/Mariehamn,Europe/Minsk,Europe/Monaco,Europe/Moscow,Europe/Oslo,Europe/Paris,Europe/Podgorica,Europe/Prague,Europe/Riga,Europe/Rome,Europe/Samara,Europe/San_Marino,Europe/Sarajevo,Europe/Saratov,Europe/Simferopol,Europe/Skopje,Europe/Sofia,Europe/Stockholm,Europe/Tallinn,Europe/Tirane,Europe/Ulyanovsk,Europe/Uzhgorod,Europe/Vaduz,Europe/Vatican,Europe/Vienna,Europe/Vilnius,Europe/Volgograd,Europe/Warsaw,Europe/Zagreb,Europe/Zaporozhye,Europe/Zurich,Indian/Antananarivo,Indian/Chagos,Indian/Christmas,Indian/Cocos,Indian/Comoro,Indian/Kerguelen,Indian/Mahe,Indian/Maldives,Indian/Mauritius,Indian/Mayotte,Indian/Reunion,Pacific/Apia,Pacific/Auckland,Pacific/Bougainville,Pacific/Chatham,Pacific/Chuuk,Pacific/Easter,Pacific/Efate,Pacific/Fakaofo,Pacific/Fiji,Pacific/Funafuti,Pacific/Galapagos,Pacific/Gambier,Pacific/Guadalcanal,Pacific/Guam,Pacific/Honolulu,Pacific/Kanton,Pacific/Kiritimati,Pacific/Kosrae,Pacific/Kwajalein,Pacific/Majuro,Pacific/Marquesas,Pacific/Midway,Pacific/Nauru,Pacific/Niue,Pacific/Norfolk,Pacific/Noumea,Pacific/Pago_Pago,Pacific/Palau,Pacific/Pitcairn,Pacific/Pohnpei,Pacific/Port_Moresby,Pacific/Rarotonga,Pacific/Saipan,Pacific/Tahiti,Pacific/Tarawa,Pacific/Tongatapu,Pacific/Wake,Pacific/Wallis,UTC,";
						return (TZ.IndexOf(","+val+",")>-1);
					}
				}
				if (rule == "filled") {if ((val || "") == "")return vM.Error.Filled;}
				//--File /Array /Image ---------------------------------------------------------------
				if(typeOf(val)=="object"){
					//--Array -----------------------------------------------
					if(val is Array){
						int size= val.Length;
						if (rule == "size" || rule == "minlen" || rule == "maxlen") {
							int nparam;
							if(!int.TryParse(param,out nparam))return vM.Rule.ParamIsNaN;;
							if (rule == "size") {if (size != nparam )return vM.Error.ArraySize.format(param);}
							if (rule == "minlen") {if (size <= nparam )return vM.Error.ArrayMinlen.format(param);}
							if (rule == "maxlen") {if (size >= nparam)return vM.Error.ArrayMaxlen.format(param);}
						}
						if (rule == "betweenlen" || rule == "outbetweenlen") {
							int minRange,maxRange;
							var range= ((string)param).Split(",").Select(str =>str.Trim()).ToArray();
							if (range.Length != 2) return vM.Rule.RangeLen2;
							if (!int.TryParse(range[0],out minRange)) return vM.Rule.Range0IsNaN;
							if (!int.TryParse(range[1],out maxRange)) return vM.Rule.Range1IsNaN;;
							if (rule == "betweenlen") {if (size < minRange || size > maxRange)return vM.Error.ArrayBetweenlen.format(param);}
							if (rule == "outbetweenlen") {if (size > minRange && size < maxRange)return vM.Error.ArrayOutBetweenlen.format(range[0],range[1]);}
						}
						if (rule == "distinct") {if (val.Distinct().ToArray().Length != val.Length)return vM.Error.Distinct;}
					}
					//--File Type -----------------------------------------------
					if (rule == "fileext" || rule == "filemime") {
						string[] vtypes = ((string)param).Split(',').Select(element => element.Trim()).ToArray();
						if (vtypes.Length == 0) return vM.Rule.ArrayTypeMimeIsZero;
						//"png,jpg,gif"
						if (rule == "fileext"){if (!(val.ContainsKey("fileExt"))) return vM.Rule.NotFileExt;if (Array.IndexOf(vtypes,val.fileExt) < 0)return vM.Error.FileExt.format(param);}
						if (rule == "filemime"){if(!(val.ContainsKey("fileMime")))return vM.Rule.NotFileMime;if (Array.IndexOf(vtypes,val.fileMime) < 0)return vM.Error.FileMime.format(param);}
					}
					//--File Size -----------------------------------------------
					if(val.ContainsKey("fileSize")){
						int fileSize= Math.Floor(val.fileSize/1024);
						if (rule == "size" || rule == "minlen" || rule == "maxlen") {
							int nparam;
							if(!int.TryParse(param,out nparam)) return vM.Rule.ParamIsNaN;;
							if (rule == "size") {if (fileSize != nparam )return vM.Error.FileSize.format(param);}
							if (rule == "minlen") {if (fileSize <= nparam )return vM.Error.FileMinlen.format(param);}
							if (rule == "maxlen") {if (fileSize >= nparam)return vM.Error.FileMaxlen.format(param);}
						}
						if (rule == "betweenlen" || rule == "outbetweenlen") {
							int minRange,maxRange;
							string[] range= ((string)param).Split(",").Select(str =>str.Trim()).ToArray();
							if (range.Length != 2) return vM.Rule.RangeLen2;;
							if(!int.TryParse(range[0],out minRange)) return vM.Rule.Range0IsNaN;
							if(!int.TryParse(range[1],out maxRange)) return vM.Rule.Range1IsNaN;
							//param: 19,13
							if (rule == "betweenlen") {if (fileSize < minRange || fileSize > maxRange)return vM.Error.FileBetweenlen.format(range[0],range[1]);}
							if (rule == "outbetweenlen") {if (fileSize > minRange && fileSize < maxRange)return vM.Error.FileOutBetweenlen.format(range[0],range[1]);}
						}
					}
					//--Image -----------------------------------------------
					if(val.ContainsKey("fileType")){
						if(val.fileType.substr(0,5)=="image"){
							if (rule == "minw" ||
								rule == "minh" ||
								rule == "maxw" ||
								rule == "maxh" ||
								rule == "sizew"|| 
								rule == "sizeh" ||
								rule == "minratio" ||
								rule == "maxratio" ||
								rule == "ratio" ){
									int nparam;
									if(!int.TryParse(param,out nparam))return  vM.Rule.ParamIsNaN;
									if(val.ContainsKey("imageWidth")){
										int width = int.TryParse(val.imageWidth,out width) ? width :0;
										if (rule == "sizew") {if (width != nparam)return vM.Error.ImageSizeW.format(param);}
										if (rule == "minw") {if (width < nparam )return vM.Error.ImageMinW.format(param);}
										if (rule == "maxw") {if (width > nparam )return vM.Error.ImageMaxW.format(param);}
									}
									if(val.ContainsKey("imageHeight")){
										int height = int.TryParse(val.imageHeight,out height) ? height :0;
										if (rule == "sizeh") {if (height != nparam)return vM.Error.ImageSizeH.format(param);}
										if (rule == "minh") {if (height < nparam )return vM.Error.ImageMinH.format(param);}
										if (rule == "maxh") {if (height > nparam )return vM.Error.ImageMaxH.format(param);}
									}
									if(val.ContainsKey("imageWidth")&&(val.ContainsKey("imageHeight"))){
										int width = int.TryParse(val.imageWidth,out width) ? width :0;
										int height = int.TryParse(val.imageHeight,out height) ? height :0;
										//ÙØ³Ø¨Øª Ø·ÙÙ Ø¨Ù Ø¹Ø±Ø¶
										float ratio = height / (width ==0 ? 1 :width);
										if (rule == "ratio") {if (ratio != nparam)return vM.Error.ImageRatio.format(param);}
										if (rule == "minratio") {if (ratio < nparam)return vM.Error.ImageMinRatio.format(param);}
										if (rule == "maxratio") {if (ratio > nparam)return vM.Error.ImageMaxRatio.format(param);}
									}
							}
							if(rule == "betweenw" || rule == "betweenh"|| rule == "betweenratio") {
								int minRange,maxRange;
								string[] range= ((string)param).Split(",").Select(str =>str.Trim()).ToArray();
								if(!int.TryParse(range[0],out minRange)) return vM.Rule.Range0IsNaN;
								if(!int.TryParse(range[1],out maxRange)) return vM.Rule.Range1IsNaN;
								if (range.Length == 2) {
									if (rule == "betweenw"){
										if(val.ContainsKey("imageWidth")){
											int width =int.TryParse(val.imageWidth,out width)?width:0;
											if (width > minRange || width < maxRange)return vM.Error.ImageBetweenWidth.format(range[0],range[1]);
										}
									}
									if (rule == "betweenh"){
										if(val.ContainsKey("imageHeight")){
											int height =int.TryParse(val.imageHeight,out height)?height:0;
											if (height > minRange || height < maxRange)return vM.Error.ImageBetweenHeight.format(range[0],range[1]);
										}
									};
									if (rule == "betweenratio"){
										if((val.ContainsKey("imageWidth"))&&(val.ContainsKey("imageHeight"))){
											int width =int.TryParse(val.imageWidth,out width)?width:0;
											int height =int.TryParse(val.imageHeight,out height)?height:0;
											//ÙØ³Ø¨Øª Ø·ÙÙ Ø¨Ù Ø¹Ø±Ø¶
											float ratio = height / (width ==0 ? 1 :width);
											if (ratio > minRange || ratio < maxRange)return vM.Error.ImageBetweenRatio.format(range[0],range[1]);
										}
									}
								}
							}
						}
					}
				}
				return "";
			}
			/**
			* @val value of input
			* @rules seperated by ;	example:"after:username;before:password;RequiredWith:fname,lname,fatherName"
			* @param {string} val
			* @param {string} rules
			* @param {json array} jsData
			* @param {object} jsRules
			* @returns json array containing errors
			*/
			static dynamic ValidationOtherFields(dynamic val, string rules, dynamic jsData, dynamic jsRules) {
				dynamic ret = new JObject();
				ret.valid= true;
				ret.msg= "";
				//example rules: "after:username;before:password;RequiredWith:fname,lname,fatherName"
				if((rules == null)||(rules.Trim().Equals(""))) return ret;
				string[] rule= ((string)rules).Split(";").Where(el=>el.Trim()!="" ).ToArray(); //example :	after:usrname;Before:confirmPassword
				if(rule.Length == 0)return ret;
				string msg= "";
				bool valid= true;
				var sep = "";
				if (rule.Length > 0) {
					foreach(var e in rule) {
						var r = e.Split(":");
						string prule = r[0].ToLower().Trim();
						string param = (r.Length > 1) ? r[1] : "";
						if((prule!="") && (param !="")){
							dynamic m= ValidationOtherField(val, prule, param, jsData, jsRules); //example:	ValidationOtherField("12", "After:username")
							if (m!="") {msg += sep + m;valid = false;sep = vM.Oprator.Sep;}
						}
					};
				}
				ret.valid= valid;
				ret.msg= msg;
				return ret;
			}
			/**
			* example for param fname,lname,fatherName
			* @val value of input
			* @rule example: RequiredWith
			* @param {string} val
			* @param {string} rule
			* @param {string} param
			* @param {json array} jsData
			* @param {object} jsRules
			* @returns string
			*/
			static dynamic ValidationOtherField (dynamic val,dynamic  rule,dynamic  param,dynamic  jsData,dynamic  jsRule) {
				//example: rules = "After:username" or "RequiredWith:fname,lname,fatherName"
				//debugger
				/*try{
				let otherFieldVal = $("[name='" + vals + "']").val();
				}catch{
				let otherFieldVal = otherField[0].value;
				}*/
				if (param == "" || rule == "") return vM.Rule.ParamOrRuleIsNaN;
				if (
					rule == "after" ||
					rule == "aftereq" ||
					rule == "before" ||
					rule == "beforeeq" ||
					rule == "same" ||
					rule == "different" ||
					rule == "requiredif") {
						if(!(jsData.ContainsKey( param)))return vM.Error.ParamIsNotInJsDate;
						dynamic otherFieldVal= jsData[param] ;
						dynamic ff = null;
						string otherLabel= ff ? ff["Label"] || "" : "";
						if (rule == "requiredif") {if ((otherFieldVal || "").ToString() != "")if (((val || "").ToString() == "") || (val==null))return vM.Error.RequiredIf.format(otherLabel);}
						if(typeOf(val)!=typeOf(otherFieldVal)) return vM.Rule.DifferenceOfType;
						
						//ToDo:
						//FIXME_VAR_TYPE ff= jsRule.Fields.find(function (j) {return (((j["InputName"]||"") == param)||((j["Name"]||"") == param));});
						if (rule == "after") {if (val <= otherFieldVal)return vM.Error.After.format(otherLabel);}
						if (rule == "aftereq") {if (val < otherFieldVal)return vM.Error.AfterEq.format(otherLabel);}
						if (rule == "before") {if (val >= otherFieldVal)return vM.Error.Before.format(otherLabel);}
						if (rule == "beforeeq") {if (val > otherFieldVal)return vM.Error.BeforeEq.format(otherLabel);}
						if (rule == "same") {if (val != otherFieldVal)return vM.Error.Same.format(otherLabel);}
						if (rule == "different") {if (val == otherFieldVal)return vM.Error.Different.format(otherLabel);}
				}
				if (rule == "requiredwith" ||
					rule == "requiredwithall" ||
					rule == "requiredwithout" ||
					rule == "requiredwithoutall") {
						if((val||"").ToString()=="")return vM.Rule.ValuesIsEmpty;
						if (rule == "requiredwith") {
						//"RequiredWith:fname,lname,fatherName"	(Ø­Ø¯Ø§ÙÙ ÛÚ©Û Ø§Ø² ÙØ§Ø¨ÙÛ Ù¾Ø± Ø¨Ø§Ø´Ø¯)
							string[] otherFieldsArr = ((string)param).Split(",").Select(s => s.Trim()).ToArray();
							string others= "";
							string op= "";
							bool anyFilled= false;
							foreach(var o in otherFieldsArr) {
								dynamic otherField= ((JArray)jsRule.Fields).FirstOrDefault(j => j["InputName"].Equals(o)) ;
								if (otherField is null) {
									string D= jsData.ContainsKey(o) ? jsData[o].ToString():"";
									if (D != "") anyFilled = true;
									string Label= (otherField.ContainsKey("Label")) ? otherField["Label"] : o;
									others += op + Label;
									op = vM.Oprator.Or;
								}
							};
							if (anyFilled == false)
								return vM.Error.RequiredWith.format(others);
						}
						
						if (rule == "requiredwithall") {//ÙÙÙ ÙØ§Ø¨ÙÛ Ù¾Ø± Ø¨Ø§Ø´ÙØ¯
							var otherFieldsArr = param.Split(",");
							string others= "";
							string op= "";
							bool allFilled= true;
							foreach(var  o in otherFieldsArr){
								string D= jsData.ContainsKey(o) ? jsData[o].ToString() : "";
								if (D == "")
									allFilled = false;
								dynamic otherField=((JArray)jsRule.Fields).FirstOrDefault(j=> j["InputName"] == o);
								if (otherField is null) {
									otherField = otherField["Label"] || "";
								} else {
									otherField = vM.Error.NotFound;
								}
								others += op + otherField;
								op = vM.Oprator.And;
							};
							if (!allFilled)return vM.Error.RequiredWithAll.format(others);
						}
						if (rule == "requiredwithout") {//Ø­Ø¯Ø§ÙÙ ÛÚ©Û Ø§Ø² ÙØ§Ø¨ÙÛ Ø®Ø§ÙÛ Ø¨Ø§Ø´Ø¯
							string[] otherFieldsArr = param.Split(",");
							string others= "";
							string op= "";
							bool allEmpty= false;
								foreach(string o in otherFieldsArr){
								string D= jsData.ContainsKey(o) ?  jsData[o].ToString() : "";
								if (D == "")
									allEmpty = true;
									dynamic  otherField=((JArray)jsRule.Fields).FirstOrDefault(j=>j["InputName"].Equals(o));
									if (otherField) {
										otherField = otherField.ContainsKey("Label") ? otherField["Label"] : "";
									} else {
										otherField = vM.Error.NotFound;
									}
									others += op + otherField;
								op = vM.Oprator.Or;
							};
							if (allEmpty == false)
								return vM.Error.RequiredWithOut.format(others);
						}
						if (rule == "requiredwithoutall") {//ÙÙÙ ÙØ§Ø¨ÙÛ Ø®Ø§ÙÛ Ø¨Ø§Ø´ÙØ¯
							string[] otherFieldsArr = param.Split(",");
							string others= "";
							string op= "";
							bool allEmpty= true;
							foreach(var o in otherFieldsArr) {
								string D= jsData.ContainsKey(o) ?  jsData[o].ToString() : "";
								if (D != "")
									allEmpty = false;
								dynamic otherField= ((JArray)jsRule.Fields).FirstOrDefault(j=> j["InputName"].Equals(o));
								if (otherField) {
									otherField = otherField["Label"] || "";
								} else {
									otherField = vM.Error.NotFound;
								}
								others += op + otherField;
								op = vM.Oprator.And;
							};
							if (allEmpty == false)
								return vM.Error.RequiredWithOutAll.format(others);
						}
				}
				return "";
			}
			public static bool PatternValidate(string PName,string txt){
				var p=((JObject)pattern).Properties().FirstOrDefault(st=> (st.Name.ToLower().Equals(PName.ToLower())));
				if(p is null)return true;
				PName=p.Name;//ToDo:
				if(pattern[PName]["Type"].ToString().ToLower()=="p"){
					string patt = "/^"+pattern[PName]["Pat"].ToString()+"$/";
					Regex regx= new Regex(patt);
					return regx.IsMatch(txt);
				}
				if(pattern[PName].Type.ToString().ToLower()=="any"){
				var a=pattern[PName]["Pat"].ToString().ToLower().Split("|");
				string patt="";
				for(int j=0;j<a.Length;j++){
					p=((JObject)pattern).Properties().FirstOrDefault(st=> (st.Name.ToLower().Equals(a[j])));
					if(!(p is null))
						patt+=(patt=="" ?"/^(" : "|") + "("+pattern[p]["Pat"]+")";
				}
				patt+=(patt==""?"" :")$/");
			if(patt=="") return true;
			Regex regx= new Regex(patt);
			return regx.IsMatch(txt);
			}
			if(pattern[PName]["Type"].ToString().ToLower()=="all"){
				var a=pattern[PName]["Pat"].ToString().ToLower().Split("&");
				string patt="";
				for(int j=0;j<a.Length;j++){
					p=((JObject)pattern).Properties().FirstOrDefault(st=> (st.Name.ToLower().Equals(a[j])));
					if(!(p is null))
						patt+=(patt=="" ?"/^(" : "") + "("+pattern[p]["Pat"]+")";
				}
				patt+=(patt==""?"" :")$/");
				if(patt=="") return true;
				Regex regx= new Regex(patt);
				return regx.IsMatch(txt);
			}
			if(pattern[PName]["Type"].ToString().ToLower()=="f"){
				MethodInfo method = typeof(M.JSONSchemaValidator).GetMethod("f"+PName, BindingFlags.Static|BindingFlags.NonPublic );
				return  (method!=null) ? (bool)method.Invoke(null,new object[]{txt}) :false; // void method
			}
			return true;
			}
			static string JustNumber(string c) {
				if (c == null || c == "")
					return "";
				c = c.ToString();
				string NC= "";for (int i= 0; i < c.Length; i++)if (c[i] >= '0' && c[i] <= '9')NC+=c[i];
				return NC;
			}
			static bool fisJSON(string c) {
				if (c == null || c == "")
					return true;
				try {
						var obj = JToken.Parse(c);
					} 
				catch(Exception e) {
						return false;
					}	
				return true;
			}
			// Check IR National Validation
			static bool firNationalCodeCo(string c) {
				if (c == null || c == "")
					return true;
				string NC= JustNumber(c.ToString());;
				if (NC.Length != 11)
					return false;
				int s= 9+(7*int.Parse(NC.Substring(0,1)))+(5*int.Parse(NC.Substring(1,1)))+(1*int.Parse(NC.Substring(2,1)))+(8*int.Parse(NC.Substring(3,1)))+(6*int.Parse(NC.Substring(4,1)))+(7*int.Parse(NC.Substring(5,1)))+(5*int.Parse(NC.Substring(6,1)))+(1*int.Parse(NC.Substring(7,1)))+(8*int.Parse(NC.Substring(8,1)))+(5*int.Parse(NC.Substring(9,1)));
				s = (s % 11) % 10;
				return (s == int.Parse(NC.Substring(10,1)));
			}
			static bool firNationalCodePerson(string c) {
				if (c == null || c == "")
					return true;
				string NC= JustNumber(c.ToString());
				if (NC.Length != 10)
					return false;
				int s= (int.Parse(NC.Substring(0,1))*10)+(int.Parse(NC.Substring(1,1))*9)+(int.Parse(NC.Substring(2,1))*8)+(int.Parse(NC.Substring(3,1))*7)+(int.Parse(NC.Substring(4,1))*6)+(int.Parse(NC.Substring(5,1))*5)+(int.Parse(NC.Substring(6,1))*4)+(int.Parse(NC.Substring(7,1))*3)+(int.Parse(NC.Substring(8,1))*2);
				Console.WriteLine(s);
				s = (s % 11);
				if (s >= 2)
					s = 11 - s;
				return (s == int.Parse(NC.Substring(9,1)));
			}
			static bool firNationalCode(string c) {
				if (c == "" || c == null) return true;
				string NC= JustNumber(c.ToString());
				if ((NC.Length < 10) || (NC.Length>11))
					return false;
				if (NC.Length == 10)
					return firNationalCodePerson(NC);
				if (NC.Length == 11)
					return firNationalCodeCo(NC);
				return false;
			}
			// Check Sheba Validation
			static int iso7064Mod97_10(string iban) {
				string remainder= iban;
				string block;
				while (remainder.Length > 2) {
					block = remainder.Slice(0, 9);
					remainder = int.Parse(block) % 97 + remainder.Slice(block.Length);
				}
				return int.Parse(remainder) % 97;
			}
			static bool firIBAN(string s) {
				if(s==null || s=="")
					return true;
				if(!s.Substring(0,2).ToUpper().Equals("IR"))
					s = "IR" + JustNumber(s.ToString());
				s=s.Substring(0,2).ToUpper()+s.Substring(2,s.Length-2);
				//ToDo:
				if (s.Length != 26) {
					return false;
				}
				Regex pattern= new Regex("/^IR[0-9]{24}$/");
				if (!pattern.IsMatch(s)) {
					return false;
				}
				string nS= s.Substring(4);
				int d1= (int)(s[0]) - 65 + 10;
				int d2= (int)(s[1]) - 65 + 10;
				nS += d1.ToString() + d2.ToString() + int.Parse(s.Substring(2, 2));
				return (iso7064Mod97_10(nS)== 1);
			}
			//Card Number Validation
			static bool firCardNum(string c) {
				if(c==null || c=="")
					return true;
				string NC= JustNumber(c.ToString());
				if( NC.Length != 16) return false;
				int CT = 0;
				for (int i = 0; i < 16; i++) {
					int C = int.Parse(NC.Substring(i,1));
					if (i % 2 == 0) {
						CT += ((C * 2 > 9) ? (C * 2) - 9 : (C * 2));
					} else {
						CT += C;
					}
				}
				return (CT % 10 == 0);
			}
			public static int PasswordScore(string pwd) {
				// Simultaneous variable declaration and value assignment aren't supported in IE apparently
				// so I'm forced to assign the same value individually per var to support a crappy browser *sigh* 
				int Score=0;
				int Length=0; //ØªØ¹Ø¯Ø§Ø¯ Ú©Ø§Ø±Ø§Ú©ØªØ±ÙØ§ Flat  +(n*4)
				int AlphaUC=0; //Ø­Ø±ÙÙ Ø¨Ø²Ø±Ú¯ Cond/Incr  +((len-n)*2)
				int AlphaLC=0; //Ø­Ø±ÙÙ Ú©ÙÚÚ© Cond/Incr  +((len-n)*2)
				int NumberC=0; //Ø§Ø¹Ø¯Ø§Ø¯ Cond  +(n*4)
				int Symbol=0; //ÙÙØ§Ø¯ÙØ§ Flat  +(n*6)
				int MidChar=0; //Ø§Ø¹Ø¯Ø§Ø¯ ÙØ³Ø·Û ÛØ§ Ø¹ÙØ§ÛÙ Flat  +(n*2)
				int Requirements=0; //Ø§ÙØ²Ø§ÙØ§Øª Flat  +(n*2)
				int AlphasOnly=0; //ÙÙØ· Ø­Ø±ÙÙ Flat  -n
				int NumbersOnly=0; //ÙÙØ· Ø§Ø¹Ø¯Ø§Ø¯ Flat  -n
				int RepChar=0; //Ú©Ø§Ø±Ø§Ú©ØªØ±ÙØ§Û ØªÚ©Ø±Ø§Ø±Û (Ø­Ø³Ø§Ø³ÛØª Ø¨Ù Ú©Ø§Ø±Ú©ØªØ±ÙØ§) Comp  -
				int ConsecAlphaUC=0; //Ø­Ø±ÙÙ Ø¨Ø²Ø±Ú¯ ÙØªÙØ§ÙÛ Flat  -(n*2)
				int ConsecAlphaLC=0; //Ø­Ø±ÙÙ Ú©ÙÚÚ© ÙØªÙØ§ÙÛ Flat  -(n*2)
				int ConsecNumber=0; //Ø§Ø¹Ø¯Ø§Ø¯ ÙØªÙØ§ÙÛ Flat  -(n*2)
				int ConsecSymbol=0;
				int SeqAlpha=0; //Ø­Ø±ÙÙ Ù¾Ø´Øª Ø³Ø± ÙÙØ ÙØ§ÙÙØ¯: aBcDe (3+) Flat  -(n*3)
				int SeqNumber=0; //Ø§Ø¹Ø¯Ø§Ø¯ Ù¾Ø´Øª Ø³Ø± ÙÙØ ÙØ§ÙÙØ¯: 12345 (3+) Flat  -(n*3)
				int SeqSymbol=0; //Ø¹ÙØ§ÛÙ Ù¾Ø´Øª Ø³Ø± ÙÙØ ÙØ§ÙÙØ¯: #$%^ (3+) Flat  -(n*3)
				int RepInc=0; 
				string sAlphas= "abcdefghijklmnopqrstuvwxyz";
				string sNumerics= "01234567890";
				string sSymbols= "!@#$%^&*()-+=_";
				int nMinPwdLen= 8;
				int UnqChar= 0;
				if (!pwd.Equals("")) {
					string ch="";
					string Bch="";
					Length = pwd.Length;
					int nMinReqChars= ((Length >= nMinPwdLen) ? 3 : 4); 
					for(int i=0;i<Length;i++){
						ch=pwd.Substring(i,1);
						if((ch.CompareTo('A')>=0) && (ch.CompareTo('Z')<=0)){
							if((Bch.CompareTo('A')>=0) && (Bch.CompareTo('Z')<=0))  ConsecAlphaUC++;
							AlphaUC++;
						}else
						if((ch.CompareTo('a')>=0) && (ch.CompareTo('z')<=0)){
							if((Bch.CompareTo('a')>=0) && (Bch.CompareTo('z')<=0))  ConsecAlphaLC++;
							AlphaLC++;
						}else
						if((ch.CompareTo('0')>=0) && (ch.CompareTo('9')<=0)){
							if (i > 0 && i < (Length - 1)) MidChar++; 
							if((Bch.CompareTo('0')>=0) && (Bch.CompareTo('9')<=0)) ConsecNumber++;
							NumberC++;
						}else
						if(sSymbols.IndexOf(ch)>=0){
							if (i > 0 && i < (Length - 1))MidChar++;
							if(sSymbols.IndexOf(Bch)>=0) ConsecSymbol++;
							Symbol++;
						}
						/* Internal loop through password to check for repeat characters */
						bool bCharExists= false;
						for (int j=0; j < Length; j++) {
							if (pwd.Substring(i,1).Equals(pwd.Substring(j,1)) && i != j) { /* repeat character exists */
								bCharExists = true;
								RepInc += Math.Abs(Length/(j-i));
							}
						}
						if (bCharExists) { 
							RepChar++; 
							UnqChar = Length-RepChar;
							RepInc = (int)((UnqChar!=0) ? Ceil(RepInc/UnqChar) : Ceil(RepInc)); 
						}
						Bch=ch;
					}
						
					/* Check for sequential alpha string patterns (forward and reverse) */
					for (int i=0; i < sAlphas.Length-3; i++) {
						string sFwd= sAlphas.Substring(i,i+3);
						string sRev= Reverse(sFwd);
						if ((pwd.ToLower().IndexOf(sFwd) != -1) || (pwd.ToLower().IndexOf(sRev) != -1)) SeqAlpha++;
					}
					/* Check for sequential numeric string patterns (forward and reverse) */
					for (int i=0; i < sNumerics.Length-3; i++) {
						string sFwd= sNumerics.Substring(i,i+3);
						string sRev= Reverse(sFwd);
						if ((pwd.ToLower().IndexOf(sFwd) != -1) || (pwd.ToLower().IndexOf(sRev) != -1)) SeqNumber++;
					}
					/* Check for sequential symbol string patterns (forward and reverse) */
					for (int i=0; i < sSymbols.Length-3; i++) {
						string sFwd= sSymbols.Substring(i,i+3);
						string sRev= Reverse(sFwd);
						if ((pwd.ToLower().IndexOf(sFwd) != -1) || (pwd.ToLower().IndexOf(sRev) != -1)) SeqSymbol++; 
					}
					
				/* Modify overall score value based on usage vs requirements */
					/* General point assignment */
					Score  = Length * 4;
					Score += (AlphaUC > 0 && AlphaUC < Length) ? (Length - AlphaUC) * 2 : 0;
					Score += (AlphaLC > 0 && AlphaLC < Length) ? (Length - AlphaLC) * 2 : 0; 
					Score += (NumberC > 0 && NumberC < Length) ? (NumberC * 4) : 0;
					Score += (Symbol > 0) ? (Symbol * 6) : 0;
					Score += (MidChar > 0) ? (MidChar * 2) : 0;
					Requirements =  ((Length > (nMinPwdLen - 1)) ? 1 : 0)
									+(AlphaUC > 0 ? 1 : 0)
									+(AlphaLC > 0 ? 1 : 0)
									+(NumberC > 0 ? 1 : 0)
									+(Symbol > 0 ? 1 : 0);
					Score += (Requirements > nMinReqChars) ? (Requirements * 2) : 0; 
					/* Point deductions for poor practices */
					Score -= ((AlphaLC > 0 || AlphaUC > 0) && Symbol == 0 && NumberC == 0) ? Length : 0;
					Score -= (AlphaLC == 0 && AlphaUC == 0 && Symbol == 0 && NumberC > 0) ? Length : 0;
					Score -= (RepChar > 0) ? RepInc : 0;
					Score -= (ConsecAlphaUC > 0) ? (ConsecAlphaUC * 2) : 0; 
					Score -= (ConsecAlphaLC > 0) ? (ConsecAlphaLC * 2) : 0; 
					Score -= (ConsecNumber > 0) ? (ConsecNumber * 2) : 0;
					Score -= (SeqAlpha > 0) ? (SeqAlpha * 3) : 0; 
					Score -= (SeqNumber > 0) ? (SeqNumber * 3) : 0; 
					Score -= (SeqSymbol > 0) ? (SeqSymbol * 3) : 0; 
					//Score = Score > 100 ? 100 : Score;
					Score = Score < 0 ? 0 : Score;
				}
			return Score;
			}
			static bool fPasswordWeak(string pass){
				if(pass.Length<4) return false;
				return (PasswordScore(pass)>40);
			}
			static bool fPasswordGood(string pass){
				if(pass.Length<6) return false;
				return (PasswordScore(pass)>60);
			}
			static bool fPasswordStrong(string pass){
				if(pass.Length<8) return false;
				return (PasswordScore(pass)>80);
			}
			static bool fPasswordVeryStrong(string pass){
				if(pass.Length<8) return false;
				return (PasswordScore(pass)>99);
			}
		}
	}
}